# Generated by Django 4.2.4 on 2023-08-06 10:54

import datetime
from django.db import migrations, models
import django.db.models.deletion
import phonenumber_field.modelfields
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="AgeRange",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("age_from", models.PositiveSmallIntegerField()),
                (
                    "age_to",
                    models.PositiveSmallIntegerField(verbose_name="End of age range (inclusive)"),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("student", "for students to select their age"),
                            ("teacher", "for teacher to select desired ages of students"),
                            ("matching", "for matching algorithm"),
                        ],
                        help_text="who/what is this range designed for",
                        max_length=50,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CoordinatorLogEvent",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("comment", models.TextField()),
                ("date_time", models.DateTimeField(auto_now_add=True)),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("applied", "Applied for the role"),
                            ("joined", "Joined the common group"),
                            ("onboarding_start", "Joined the onboarding group"),
                            (
                                "took_new_group",
                                "Took a new group (not transferred from another coordinator)",
                            ),
                            ("group_started_classes", "The group started classes"),
                            (
                                "requested_transfer",
                                "Requested that the group be transferred to a different coordinator",
                            ),
                            (
                                "transfer_canceled",
                                "Transfer canceled (declined or the coordinator changed their mind)",
                            ),
                            ("transferred", "Transfer of group to another coordinator completed"),
                            ("took_transfer", "Received group from another coordinator"),
                            ("gone_on_leave", "Gone on leave"),
                            ("returned_from_leave", "Returned from leave"),
                            ("left_prematurely", "Left the project prematurely"),
                            (
                                "finished_and_leaving",
                                "Finished working and announced that they are leaving the project",
                            ),
                            (
                                "finished_and_staying",
                                "Finished working and announced that they are staying in the project",
                            ),
                            ("expelled", "Expelled from the project"),
                            ("access_revoked", "Access to corporate resources revoked"),
                            ("group_aborted", "Group finished prematurely"),
                        ],
                        max_length=50,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="DayAndTimeSlot",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "day_of_week_index",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (0, "Monday"),
                            (1, "Tuesday"),
                            (2, "Wednesday"),
                            (3, "Thursday"),
                            (4, "Friday"),
                            (5, "Saturday"),
                            (6, "Sunday"),
                        ],
                        verbose_name="day of the week",
                    ),
                ),
            ],
            options={
                "ordering": ("day_of_week_index", "time_slot__from_utc_hour"),
            },
        ),
        migrations.CreateModel(
            name="EnrollmentTest",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="EnrollmentTestQuestion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("text", models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name="EnrollmentTestQuestionOption",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("text", models.CharField(max_length=50)),
                ("is_correct", models.BooleanField()),
            ],
        ),
        migrations.CreateModel(
            name="EnrollmentTestResult",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Group",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "communication_language_mode",
                    models.CharField(
                        choices=[
                            ("ru", "Russian only"),
                            ("ua", "Ukrainian only"),
                            ("ru_ua", "Russian or Ukrainian"),
                            ("l2_only", "Only language being taught"),
                        ],
                        max_length=50,
                        verbose_name="Language(s) the students and teachers can speak in class",
                    ),
                ),
                ("telegram_chat_url", models.URLField(blank=True, null=True)),
                ("is_for_staff_only", models.BooleanField(default=False)),
                ("lesson_duration_in_minutes", models.PositiveSmallIntegerField()),
                (
                    "project_status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("awaiting_start", "Group confirmed, awaiting start of classes"),
                            ("working", "Working, everything is OK"),
                            ("aborted", "Finished prematurely"),
                            ("finished", "Finished (completed the course)"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "situational_status",
                    models.CharField(
                        blank=True,
                        choices=[
                            (
                                "attention",
                                "Some sort of problem: needs substitute teacher, change of coordinator etc.",
                            )
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "status_since",
                    models.DateTimeField(
                        help_text="date and time of last change of project-level or situational status"
                    ),
                ),
                ("start_date", models.DateField(blank=True, null=True)),
                ("end_date", models.DateField(blank=True, null=True)),
                ("monday", models.TimeField(blank=True, null=True)),
                ("tuesday", models.TimeField(blank=True, null=True)),
                ("wednesday", models.TimeField(blank=True, null=True)),
                ("thursday", models.TimeField(blank=True, null=True)),
                ("friday", models.TimeField(blank=True, null=True)),
                ("saturday", models.TimeField(blank=True, null=True)),
                ("sunday", models.TimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="GroupLogEvent",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("comment", models.TextField()),
                ("date_time", models.DateTimeField(auto_now_add=True)),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("formed", "Formed (automatically or by coordinator)"),
                            ("not_confirmed_teacher", "Not confirmed because teacher refused"),
                            (
                                "not_confirmed_students",
                                "Not confirmed because not enough students confirmed their participation",
                            ),
                            ("confirmed", "Confirmed"),
                            ("started", "Started classes"),
                            ("aborted", "Finished prematurely"),
                            ("finished", "Finished successfully"),
                            (
                                "coordinator_requested_transfer",
                                "Coordinator requested transfer of group to another coordinator",
                            ),
                            (
                                "student_requested_transfer",
                                "Student requested transfer to another group",
                            ),
                            (
                                "teacher_requested_substitution",
                                "Teacher requested to be substituted with another teacher",
                            ),
                        ],
                        max_length=50,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Language",
            fields=[
                (
                    "id",
                    models.CharField(
                        max_length=2, primary_key=True, serialize=False, verbose_name="locale"
                    ),
                ),
                ("name", models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name="LanguageAndLevel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Languages with levels",
            },
        ),
        migrations.CreateModel(
            name="LanguageLevel",
            fields=[
                ("id", models.CharField(max_length=2, primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name="NonTeachingHelp",
            fields=[
                (
                    "id",
                    models.CharField(
                        choices=[
                            ("cv_write_edit", "CV and cover letter (write or edit)"),
                            ("cv_proofread", "CV and cover letter (proofread)"),
                            ("mock_interview", "Mock interview"),
                            ("job_search", "Job search"),
                            ("career_strategy", "Career strategy"),
                            ("linkedin", "LinkedIn profile"),
                            ("career_switch", "Career switch"),
                            ("portfolio", "Portfolio for creative industries"),
                            ("uni_abroad", "Entering a university abroad"),
                            ("translate_docs", "Translation of documents"),
                        ],
                        max_length=20,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=255, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name="PersonalInfo",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "communication_language_mode",
                    models.CharField(
                        choices=[
                            ("ru", "Russian only"),
                            ("ua", "Ukrainian only"),
                            ("ru_ua", "Russian or Ukrainian"),
                            ("l2_only", "Only language being taught"),
                        ],
                        max_length=50,
                        verbose_name="Language(s) the students and teachers can speak in class",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        verbose_name="autogenerated unique identifier",
                    ),
                ),
                ("date_and_time_added", models.DateTimeField(auto_now_add=True)),
                ("first_name", models.CharField(max_length=100)),
                ("last_name", models.CharField(max_length=100)),
                (
                    "telegram_username",
                    models.CharField(blank=True, max_length=100, verbose_name="Telegram username"),
                ),
                ("email", models.EmailField(max_length=254)),
                (
                    "phone",
                    phonenumber_field.modelfields.PhoneNumberField(
                        blank=True, max_length=128, null=True, region=None
                    ),
                ),
                (
                    "utc_timedelta",
                    models.DurationField(
                        default=datetime.timedelta(0),
                        verbose_name="Difference between person's local time zone and UTC",
                    ),
                ),
                (
                    "information_source",
                    models.TextField(
                        help_text="how did they learn about Samantha Smith's Group?",
                        verbose_name="source of info about SSG",
                    ),
                ),
                ("registration_telegram_bot_chat_id", models.IntegerField(blank=True, null=True)),
                (
                    "registration_telegram_bot_language",
                    models.CharField(
                        choices=[("en", "English"), ("ru", "Russian"), ("ua", "Ukrainian")],
                        help_text="Language in which the person wishes to communicate with the bot (is chosen by the person at first contact)",
                        max_length=2,
                    ),
                ),
                ("chatwoot_conversation_id", models.IntegerField(blank=True, null=True)),
            ],
            options={
                "verbose_name_plural": "personal info records",
                "ordering": ("last_name", "first_name"),
            },
        ),
        migrations.CreateModel(
            name="SpeakingClub",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "communication_language_mode",
                    models.CharField(
                        choices=[
                            ("ru", "Russian only"),
                            ("ua", "Ukrainian only"),
                            ("ru_ua", "Russian or Ukrainian"),
                            ("l2_only", "Only language being taught"),
                        ],
                        max_length=50,
                        verbose_name="Language(s) the students and teachers can speak in class",
                    ),
                ),
                ("telegram_chat_url", models.URLField(blank=True, null=True)),
                (
                    "is_for_children",
                    models.BooleanField(
                        default=False, verbose_name="Is this a speaking club for children?"
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="StudentLogEvent",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("comment", models.TextField()),
                ("date_time", models.DateTimeField(auto_now_add=True)),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("registered", "Completed registration"),
                            ("awaiting_offer", "Registration complete, waiting for a group"),
                            ("group_offered", "Was offered a group, has not responded yet"),
                            ("accepted_offer", "Was offered a group and accepted it"),
                            ("declined_offer", "Was offered a group but declined it"),
                            ("group_confirmed", "Group confirmed, awaiting start of classes"),
                            ("start", "Started studying in a group"),
                            (
                                "missed_class_notified",
                                "Missed a class but let the teacher know in advance",
                            ),
                            (
                                "missed_class_silently",
                                "Missed a class without letting the teacher know in advance",
                            ),
                            ("requested_transfer", "Requested transfer"),
                            ("transferred", "Transferred"),
                            ("transfer_canceled", "Transfer canceled"),
                            ("left_prematurely", "Left the project prematurely"),
                            ("expelled", "Expelled from the project"),
                            ("finished_left", "Completed the course and left the project"),
                            (
                                "finished_stays",
                                "Completed the course and wants to join another group",
                            ),
                            ("group_aborted", "Group finished prematurely"),
                            ("group_finished", "Group finished successfully"),
                        ],
                        max_length=50,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="TeacherLogEvent",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("comment", models.TextField()),
                ("date_time", models.DateTimeField(auto_now_add=True)),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("registered", "Completed registration"),
                            (
                                "awaiting_offer",
                                "Registration and validation complete, started waiting for a group",
                            ),
                            ("group_offered", "Was offered a group, has not responded yet"),
                            ("accepted_offer", "Was offered a group and accepted it"),
                            ("Validated in a face-to-face interview", "Validated"),
                            ("declined_offer", "Was offered a group but declined it"),
                            ("group_confirmed", "Group confirmed, awaiting start of classes"),
                            ("started_teaching_group", "Started teaching a group"),
                            ("hosted_speaking_club", "Hosted a speaking club session"),
                            ("left_prematurely", "Left the project prematurely"),
                            (
                                "finished_and_leaving",
                                "Finished working and announced that they are leaving the project",
                            ),
                            (
                                "finished_and_staying",
                                "Finished working and announced that they are staying in the project",
                            ),
                            ("expelled", "Expelled from the project"),
                            ("access_revoked", "Access to corporate resources revoked"),
                            ("group_aborted", "Group finished prematurely"),
                            ("group_finished", "Group finished successfully"),
                        ],
                        max_length=50,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="TeacherUnder18LogEvent",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("comment", models.TextField()),
                ("date_time", models.DateTimeField(auto_now_add=True)),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("registered", "Completed registration"),
                            ("Validated in a face-to-face interview", "Validated"),
                            ("hosted_speaking_club", "Hosted a speaking club session"),
                            ("left", "Left the project"),
                            ("expelled", "Expelled from the project"),
                            ("access_revoked", "Access to corporate resources revoked"),
                        ],
                        max_length=50,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="TimeSlot",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("from_utc_hour", models.TimeField()),
                ("to_utc_hour", models.TimeField()),
            ],
        ),
        migrations.CreateModel(
            name="Coordinator",
            fields=[
                ("comment", models.TextField(blank=True)),
                (
                    "personal_info",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        related_name="as_%(class)s",
                        serialize=False,
                        to="api.personalinfo",
                    ),
                ),
                (
                    "status_since",
                    models.DateTimeField(
                        help_text="date and time of last change of project-level or situational status"
                    ),
                ),
                (
                    "is_admin",
                    models.BooleanField(
                        default=False,
                        help_text="This field has nothing to do with accessing Django admin site. It marks coordinators that have special rights over ordinary coordinators.",
                    ),
                ),
                (
                    "is_validated",
                    models.BooleanField(
                        help_text="Has an initial validation interview been conducted with this teacher?"
                    ),
                ),
                (
                    "project_status",
                    models.CharField(
                        choices=[
                            ("pending", "Completed registration, but not in working status yet"),
                            (
                                "working_threshold_not_reached",
                                "Working, but not yet reached the required minimum amount of groups (5)",
                            ),
                            ("working_ok", "Working, required amount of groups reached"),
                            (
                                "working_limit_reached",
                                "Working, reached maximum number of groups (20)",
                            ),
                            ("on_leave", "On leave"),
                            (
                                "left_prematurely",
                                "Announced that they cannot participate in the project",
                            ),
                            ("finished_stays", "Finished coordinating but remains in the project"),
                            ("finished_left", "Finished coordinating and left the project"),
                            ("removed", "All access revoked, accounts closed"),
                            ("banned", "Banned from the project"),
                        ],
                        help_text="status of this student with regard to project as a whole",
                        max_length=50,
                        verbose_name="status in project",
                    ),
                ),
                (
                    "situational_status",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("pending", "Completed registration, waiting for onboarding"),
                            ("onboarding", "In onboarding"),
                            (
                                "onboarding_stale",
                                "Has been in onboarding for too long without taking a group",
                            ),
                            ("no_response", "Not responding"),
                        ],
                        max_length=50,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Student",
            fields=[
                ("comment", models.TextField(blank=True)),
                (
                    "personal_info",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        related_name="as_%(class)s",
                        serialize=False,
                        to="api.personalinfo",
                    ),
                ),
                (
                    "status_since",
                    models.DateTimeField(
                        help_text="date and time of last change of project-level or situational status"
                    ),
                ),
                ("can_read_in_english", models.BooleanField(blank=True, null=True)),
                (
                    "is_member_of_speaking_club",
                    models.BooleanField(
                        default=False,
                        help_text="Is the student a member of a speaking club at the moment?",
                        verbose_name="Speaking club status",
                    ),
                ),
                (
                    "smalltalk_test_result",
                    models.JSONField(
                        blank=True, help_text="JSON received from SmallTalk API", null=True
                    ),
                ),
                (
                    "project_status",
                    models.CharField(
                        choices=[
                            ("not_studying", "Not studying, waiting for a group"),
                            ("study", "Studying in a group"),
                            ("on_leave", "On leave"),
                            ("left_prematurely", "Left the project prematurely"),
                            ("finished", "Completed the course and left the project"),
                            ("banned", "Banned from the project"),
                        ],
                        help_text="status of this student with regard to project as a whole",
                        max_length=50,
                        verbose_name="status in project",
                    ),
                ),
                (
                    "situational_status",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("group_offered", "Was offered a group, has not responded yet"),
                            ("awaiting_start", "Group confirmed, awaiting start of classes"),
                            (
                                "not_attending",
                                "Missed 3 classes in a row without letting the teacher know",
                            ),
                            ("needs_transfer", "Needs transfer to another group"),
                            ("no_response", "Not responding"),
                        ],
                        max_length=50,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Teacher",
            fields=[
                ("comment", models.TextField(blank=True)),
                (
                    "personal_info",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        related_name="as_%(class)s",
                        serialize=False,
                        to="api.personalinfo",
                    ),
                ),
                (
                    "status_since",
                    models.DateTimeField(
                        help_text="date and time of last change of project-level or situational status"
                    ),
                ),
                ("can_host_speaking_club", models.BooleanField(default=False)),
                ("has_hosted_speaking_club", models.BooleanField(default=False)),
                (
                    "is_validated",
                    models.BooleanField(
                        help_text="Has an initial validation interview been conducted with this teacher?"
                    ),
                ),
                (
                    "non_teaching_help_provided_comment",
                    models.CharField(
                        blank=True,
                        help_text="For adult teacher: other ways in which the applicant could help the students beside listed ones. For teacher under 18: applicant's free-text comment on how they can help our students apart from hosting speaking clubs.",
                        max_length=255,
                        verbose_name="comment on additional non-teaching skills",
                    ),
                ),
                (
                    "has_prior_teaching_experience",
                    models.BooleanField(
                        default=False,
                        help_text="has the applicant already worked as a teacher before applying at Samantha Smith's Group?",
                    ),
                ),
                (
                    "peer_support_can_check_syllabus",
                    models.BooleanField(
                        default=False, verbose_name="peer support: can check syllabus"
                    ),
                ),
                (
                    "peer_support_can_host_mentoring_sessions",
                    models.BooleanField(
                        default=False,
                        verbose_name="peer support: can host individual or group mentoring sessions",
                    ),
                ),
                (
                    "peer_support_can_give_feedback",
                    models.BooleanField(
                        default=False, verbose_name="peer support: can give feedback"
                    ),
                ),
                (
                    "peer_support_can_help_with_childrens_groups",
                    models.BooleanField(
                        default=False, verbose_name="peer support: can help with children's groups"
                    ),
                ),
                (
                    "peer_support_can_provide_materials",
                    models.BooleanField(
                        default=False, verbose_name="peer support: can provide teaching materials"
                    ),
                ),
                (
                    "peer_support_can_invite_to_class",
                    models.BooleanField(
                        default=False,
                        verbose_name="peer support: can invite other teachers to their class",
                    ),
                ),
                (
                    "peer_support_can_work_in_tandem",
                    models.BooleanField(
                        default=False,
                        verbose_name="peer support: can work in tandem with a less experienced teacher",
                    ),
                ),
                (
                    "simultaneous_groups",
                    models.PositiveSmallIntegerField(
                        default=1,
                        help_text="number of groups the teacher can teach simultaneously",
                    ),
                ),
                (
                    "project_status",
                    models.CharField(
                        choices=[
                            ("not_working", "Not working, waiting for a group"),
                            ("working", "Working"),
                            ("on_leave", "On leave"),
                            (
                                "left_prematurely",
                                "Announced that they cannot participate in the project",
                            ),
                            ("finished_left", "Finished teaching and left the project"),
                            ("finished_stays", "Finished teaching but remains in the project"),
                            ("banned", "Banned from the project"),
                            ("removed", "All access revoked, accounts closed"),
                        ],
                        help_text="status of this student with regard to project as a whole",
                        max_length=50,
                        verbose_name="status in project",
                    ),
                ),
                (
                    "situational_status",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("group_offered", "Was offered a group, has not responded yet"),
                            ("awaiting_start", "Group confirmed, awaiting start of classes"),
                            (
                                "needs_substitution",
                                "Needs a break in teaching the group, substitute teacher needed",
                            ),
                            ("no_response", "Not responding"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "weekly_frequency_per_group",
                    models.PositiveSmallIntegerField(
                        help_text="number of times per week the teacher can have classes with each group. This column will be ignored if the teacher currently doesn't want to teach any groups (in which case the column 'simultaneous groups' will have value 0). The value of frequency column does NOT have to be 0 in this case. Maybe the teacher will start (or return to) group studies and the frequency column will become relevant."
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="TeacherUnder18",
            fields=[
                ("comment", models.TextField(blank=True)),
                (
                    "personal_info",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        related_name="as_%(class)s",
                        serialize=False,
                        to="api.personalinfo",
                    ),
                ),
                (
                    "status_since",
                    models.DateTimeField(
                        help_text="date and time of last change of project-level or situational status"
                    ),
                ),
                ("can_host_speaking_club", models.BooleanField(default=False)),
                ("has_hosted_speaking_club", models.BooleanField(default=False)),
                (
                    "is_validated",
                    models.BooleanField(
                        help_text="Has an initial validation interview been conducted with this teacher?"
                    ),
                ),
                (
                    "non_teaching_help_provided_comment",
                    models.CharField(
                        blank=True,
                        help_text="For adult teacher: other ways in which the applicant could help the students beside listed ones. For teacher under 18: applicant's free-text comment on how they can help our students apart from hosting speaking clubs.",
                        max_length=255,
                        verbose_name="comment on additional non-teaching skills",
                    ),
                ),
                (
                    "project_status",
                    models.CharField(
                        choices=[
                            ("not_working", "Not working, waiting for a group"),
                            ("working", "Working"),
                            ("on_leave", "On leave"),
                            (
                                "left_prematurely",
                                "Announced that they cannot participate in the project",
                            ),
                            ("finished_left", "Finished teaching and left the project"),
                            ("finished_stays", "Finished teaching but remains in the project"),
                            ("banned", "Banned from the project"),
                            ("removed", "All access revoked, accounts closed"),
                        ],
                        help_text="status of this student with regard to project as a whole",
                        max_length=50,
                        verbose_name="status in project",
                    ),
                ),
                (
                    "situational_status",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("group_offered", "Was offered a group, has not responded yet"),
                            ("awaiting_start", "Group confirmed, awaiting start of classes"),
                            (
                                "needs_substitution",
                                "Needs a break in teaching the group, substitute teacher needed",
                            ),
                            ("no_response", "Not responding"),
                        ],
                        max_length=50,
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Teachers under 18 years of age",
            },
        ),
        migrations.AddConstraint(
            model_name="timeslot",
            constraint=models.UniqueConstraint(
                fields=("from_utc_hour", "to_utc_hour"), name="from_to_hour"
            ),
        ),
        migrations.AddField(
            model_name="teacherlogevent",
            name="from_group",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="teacher_log_events_from_this_group",
                to="api.group",
            ),
        ),
        migrations.AddField(
            model_name="teacherlogevent",
            name="to_group",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="teacher_log_events_to_this_group",
                to="api.group",
            ),
        ),
        migrations.AddField(
            model_name="studentlogevent",
            name="from_group",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="student_log_events_from_this_group",
                to="api.group",
            ),
        ),
        migrations.AddField(
            model_name="studentlogevent",
            name="to_group",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="student_log_events_to_this_group",
                to="api.group",
            ),
        ),
        migrations.AddField(
            model_name="speakingclub",
            name="language",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT, to="api.language"
            ),
        ),
        migrations.AddIndex(
            model_name="personalinfo",
            index=models.Index(fields=["last_name", "first_name", "email"], name="name_email_idx"),
        ),
        migrations.AddConstraint(
            model_name="personalinfo",
            constraint=models.UniqueConstraint(
                fields=("first_name", "last_name", "email"), name="full_name_and_email"
            ),
        ),
        migrations.AddField(
            model_name="languageandlevel",
            name="language",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="api.language"
            ),
        ),
        migrations.AddField(
            model_name="languageandlevel",
            name="level",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="api.languagelevel"
            ),
        ),
        migrations.AddField(
            model_name="grouplogevent",
            name="group",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="api.group"),
        ),
        migrations.AddField(
            model_name="group",
            name="availability_slots_for_auto_matching",
            field=models.ManyToManyField(to="api.dayandtimeslot"),
        ),
        migrations.AddField(
            model_name="group",
            name="language_and_level",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT, to="api.languageandlevel"
            ),
        ),
        migrations.AddField(
            model_name="enrollmenttestresult",
            name="answers",
            field=models.ManyToManyField(to="api.enrollmenttestquestionoption"),
        ),
        migrations.AddField(
            model_name="enrollmenttestquestionoption",
            name="question",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="options",
                to="api.enrollmenttestquestion",
            ),
        ),
        migrations.AddField(
            model_name="enrollmenttestquestion",
            name="enrollment_test",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="questions",
                to="api.enrollmenttest",
            ),
        ),
        migrations.AddField(
            model_name="enrollmenttest",
            name="age_ranges",
            field=models.ManyToManyField(
                blank=True,
                help_text="age ranges for which this test was designed. Leave blank for the test to be shown to all ages.",
                to="api.agerange",
            ),
        ),
        migrations.AddField(
            model_name="enrollmenttest",
            name="language",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="api.language"
            ),
        ),
        migrations.AddField(
            model_name="dayandtimeslot",
            name="time_slot",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="api.timeslot"
            ),
        ),
        migrations.AddField(
            model_name="coordinatorlogevent",
            name="group",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="coordinator_log_events",
                to="api.group",
            ),
        ),
        migrations.AddConstraint(
            model_name="agerange",
            constraint=models.UniqueConstraint(
                fields=("age_from", "age_to", "type"), name="unique_age_and_type"
            ),
        ),
        migrations.AddField(
            model_name="teacherunder18logevent",
            name="teacher",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="log",
                to="api.teacherunder18",
            ),
        ),
        migrations.AddField(
            model_name="teacherunder18",
            name="teaching_languages_and_levels",
            field=models.ManyToManyField(to="api.languageandlevel"),
        ),
        migrations.AddField(
            model_name="teacherlogevent",
            name="teacher",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name="log", to="api.teacher"
            ),
        ),
        migrations.AddField(
            model_name="teacher",
            name="availability_slots",
            field=models.ManyToManyField(to="api.dayandtimeslot"),
        ),
        migrations.AddField(
            model_name="teacher",
            name="non_teaching_help_provided",
            field=models.ManyToManyField(
                blank=True,
                related_name="teachers",
                to="api.nonteachinghelp",
                verbose_name="Types of non-teaching help this teacher can provide to students",
            ),
        ),
        migrations.AddField(
            model_name="teacher",
            name="student_age_ranges",
            field=models.ManyToManyField(
                help_text="age ranges of students that the teacher is willing to teach. The 'from's and 'to's of these ranges are wider than those the students choose for themselves.",
                to="api.agerange",
            ),
        ),
        migrations.AddField(
            model_name="teacher",
            name="teaching_languages_and_levels",
            field=models.ManyToManyField(to="api.languageandlevel"),
        ),
        migrations.AddField(
            model_name="studentlogevent",
            name="student",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name="log", to="api.student"
            ),
        ),
        migrations.AddField(
            model_name="student",
            name="age_range",
            field=models.ForeignKey(
                help_text="We do not ask students for their exact age. They choose an age range when registering with us.",
                on_delete=django.db.models.deletion.PROTECT,
                to="api.agerange",
            ),
        ),
        migrations.AddField(
            model_name="student",
            name="availability_slots",
            field=models.ManyToManyField(to="api.dayandtimeslot"),
        ),
        migrations.AddField(
            model_name="student",
            name="children",
            field=models.ManyToManyField(
                blank=True,
                help_text="children of this student that are also studying at SSG",
                related_name="parents",
                to="api.student",
            ),
        ),
        migrations.AddField(
            model_name="student",
            name="non_teaching_help_required",
            field=models.ManyToManyField(
                blank=True,
                related_name="students",
                to="api.nonteachinghelp",
                verbose_name="Types of non-teaching help this student requires",
            ),
        ),
        migrations.AddField(
            model_name="student",
            name="teaching_languages_and_levels",
            field=models.ManyToManyField(to="api.languageandlevel"),
        ),
        migrations.AddField(
            model_name="speakingclub",
            name="coordinators",
            field=models.ManyToManyField(related_name="%(class)ss", to="api.coordinator"),
        ),
        migrations.AddField(
            model_name="speakingclub",
            name="coordinators_former",
            field=models.ManyToManyField(
                blank=True,
                help_text="Lists coordinators that once worked with this group and/or the coordinator(s) of this group when it finished classes or was aborted.",
                related_name="%(class)ss_former",
                to="api.coordinator",
                verbose_name="Former coordinators",
            ),
        ),
        migrations.AddField(
            model_name="speakingclub",
            name="students",
            field=models.ManyToManyField(related_name="%(class)ss", to="api.student"),
        ),
        migrations.AddField(
            model_name="speakingclub",
            name="students_former",
            field=models.ManyToManyField(
                blank=True,
                help_text="Lists students that once worked with this group and/or all students of this group when it finished classes or was aborted.",
                related_name="%(class)ss_former",
                to="api.student",
                verbose_name="Former students",
            ),
        ),
        migrations.AddField(
            model_name="speakingclub",
            name="teachers",
            field=models.ManyToManyField(related_name="%(class)ss", to="api.teacher"),
        ),
        migrations.AddField(
            model_name="speakingclub",
            name="teachers_former",
            field=models.ManyToManyField(
                blank=True,
                help_text="Lists teachers that once worked with this group, and/or the teacher(s) of this group when it finished classes or was aborted.",
                related_name="%(class)ss_former",
                to="api.teacher",
                verbose_name="Former teachers",
            ),
        ),
        migrations.AddField(
            model_name="speakingclub",
            name="teachers_under_18",
            field=models.ManyToManyField(to="api.teacherunder18"),
        ),
        migrations.AddIndex(
            model_name="grouplogevent",
            index=models.Index(fields=["group_id"], name="group_id_idx"),
        ),
        migrations.AddIndex(
            model_name="grouplogevent",
            index=models.Index(fields=["type"], name="group_log_event_type_idx"),
        ),
        migrations.AddField(
            model_name="group",
            name="coordinators",
            field=models.ManyToManyField(related_name="%(class)ss", to="api.coordinator"),
        ),
        migrations.AddField(
            model_name="group",
            name="coordinators_former",
            field=models.ManyToManyField(
                blank=True,
                help_text="Lists coordinators that once worked with this group and/or the coordinator(s) of this group when it finished classes or was aborted.",
                related_name="%(class)ss_former",
                to="api.coordinator",
                verbose_name="Former coordinators",
            ),
        ),
        migrations.AddField(
            model_name="group",
            name="students",
            field=models.ManyToManyField(related_name="%(class)ss", to="api.student"),
        ),
        migrations.AddField(
            model_name="group",
            name="students_former",
            field=models.ManyToManyField(
                blank=True,
                help_text="Lists students that once worked with this group and/or all students of this group when it finished classes or was aborted.",
                related_name="%(class)ss_former",
                to="api.student",
                verbose_name="Former students",
            ),
        ),
        migrations.AddField(
            model_name="group",
            name="teachers",
            field=models.ManyToManyField(related_name="%(class)ss", to="api.teacher"),
        ),
        migrations.AddField(
            model_name="group",
            name="teachers_former",
            field=models.ManyToManyField(
                blank=True,
                help_text="Lists teachers that once worked with this group, and/or the teacher(s) of this group when it finished classes or was aborted.",
                related_name="%(class)ss_former",
                to="api.teacher",
                verbose_name="Former teachers",
            ),
        ),
        migrations.AddField(
            model_name="enrollmenttestresult",
            name="student",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="api.student"),
        ),
        migrations.AddConstraint(
            model_name="enrollmenttestquestionoption",
            constraint=models.UniqueConstraint(
                fields=("question_id", "text"), name="option_unique_per_question"
            ),
        ),
        migrations.AddConstraint(
            model_name="enrollmenttestquestion",
            constraint=models.UniqueConstraint(
                fields=("enrollment_test_id", "text"), name="option_unique_per_test"
            ),
        ),
        migrations.AddConstraint(
            model_name="dayandtimeslot",
            constraint=models.UniqueConstraint(
                fields=("day_of_week_index", "time_slot"), name="unique_day_and_slot"
            ),
        ),
        migrations.AddField(
            model_name="coordinatorlogevent",
            name="coordinator",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="log",
                to="api.coordinator",
            ),
        ),
        migrations.AddField(
            model_name="coordinator",
            name="mentor",
            field=models.ForeignKey(
                blank=True,
                help_text="mentor of this coordinator. One coordinator can have many interns",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="interns",
                to="api.coordinator",
            ),
        ),
        migrations.AddIndex(
            model_name="teacherunder18logevent",
            index=models.Index(fields=["teacher_id"], name="teacher_id_idx"),
        ),
        migrations.AddIndex(
            model_name="teacherunder18logevent",
            index=models.Index(fields=["type"], name="teacher_log_event_type_idx"),
        ),
        migrations.AddIndex(
            model_name="teacherunder18",
            index=models.Index(fields=["project_status"], name="teacher_under_18_pr_status_idx"),
        ),
        migrations.AddIndex(
            model_name="teacherunder18",
            index=models.Index(
                fields=["situational_status"], name="teacher_under_18_si_status_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="teacherlogevent",
            index=models.Index(fields=["teacher_id"], name="young_teacher_id_idx"),
        ),
        migrations.AddIndex(
            model_name="teacherlogevent",
            index=models.Index(fields=["type"], name="young_teach_log_event_type_idx"),
        ),
        migrations.AddIndex(
            model_name="teacher",
            index=models.Index(fields=["project_status"], name="teacher_pr_status_idx"),
        ),
        migrations.AddIndex(
            model_name="teacher",
            index=models.Index(fields=["situational_status"], name="teacher_si_status_idx"),
        ),
        migrations.AddIndex(
            model_name="studentlogevent",
            index=models.Index(fields=["student_id"], name="student_id_idx"),
        ),
        migrations.AddIndex(
            model_name="studentlogevent",
            index=models.Index(fields=["type"], name="student_log_event_type_idx"),
        ),
        migrations.AddIndex(
            model_name="student",
            index=models.Index(fields=["project_status"], name="student_pr_status_idx"),
        ),
        migrations.AddIndex(
            model_name="student",
            index=models.Index(fields=["situational_status"], name="student_si_status_idx"),
        ),
        migrations.AddIndex(
            model_name="group",
            index=models.Index(fields=["language_and_level"], name="group_language_level_idx"),
        ),
        migrations.AddIndex(
            model_name="group",
            index=models.Index(fields=["project_status"], name="group_pr_status_idx"),
        ),
        migrations.AddIndex(
            model_name="group",
            index=models.Index(fields=["situational_status"], name="group_si_status_idx"),
        ),
        migrations.AddIndex(
            model_name="group",
            index=models.Index(fields=["start_date"], name="group_start_date_idx"),
        ),
        migrations.AddConstraint(
            model_name="group",
            constraint=models.UniqueConstraint(
                fields=("telegram_chat_url",), name="telegram_chat_url"
            ),
        ),
        migrations.AddConstraint(
            model_name="group",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("monday__isnull", False),
                    ("tuesday__isnull", False),
                    ("wednesday__isnull", False),
                    ("thursday__isnull", False),
                    ("friday__isnull", False),
                    ("saturday__isnull", False),
                    ("sunday__isnull", False),
                    _connector="OR",
                ),
                name="at_least_one_day_time_slot_must_be_selected",
            ),
        ),
        migrations.AddIndex(
            model_name="coordinatorlogevent",
            index=models.Index(fields=["coordinator_id"], name="coordinator_id_idx"),
        ),
        migrations.AddIndex(
            model_name="coordinatorlogevent",
            index=models.Index(fields=["type"], name="coordinator_log_event_type_idx"),
        ),
        migrations.AddIndex(
            model_name="coordinator",
            index=models.Index(fields=["project_status"], name="coordinator_pr_status_idx"),
        ),
        migrations.AddIndex(
            model_name="coordinator",
            index=models.Index(fields=["situational_status"], name="coordinator_si_status_idx"),
        ),
    ]
