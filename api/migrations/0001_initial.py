# Generated by Django 4.1.6 on 2023-02-10 11:34
import uuid

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="AdminSiteUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("login", models.CharField(max_length=70)),
                ("full_name", models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name="CoordinatorInfo",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("is_admin", models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name="LanguageLevel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("name", models.CharField(max_length=3)),
            ],
        ),
        migrations.CreateModel(
            name="TeachingLanguage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="TeachingLanguageAndLevel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "language",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="api.teachinglanguage"
                    ),
                ),
                (
                    "level",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="api.languagelevel"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="TeacherInfo",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "teaching_languages_and_levels",
                    models.ManyToManyField(to="api.teachinglanguageandlevel"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="StudentInfo",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "teaching_languages_and_levels",
                    models.ManyToManyField(to="api.teachinglanguageandlevel"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Person",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("first_name", models.CharField(max_length=100)),
                ("last_name", models.CharField(max_length=100)),
                ("email", models.EmailField(max_length=254)),
                ("phone", models.CharField(max_length=50)),
                (
                    "coordinator_info",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.coordinatorinfo",
                    ),
                ),
                (
                    "student_info",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.studentinfo",
                    ),
                ),
                (
                    "teacher_info",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.teacherinfo",
                    ),
                ),
            ],
            options={
                "ordering": ("last_name", "first_name"),
            },
        ),
        migrations.CreateModel(
            name="Group",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "coordinators",
                    models.ManyToManyField(related_name="groups_as_coordinator", to="api.person"),
                ),
                (
                    "language_and_level",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.teachinglanguageandlevel",
                    ),
                ),
                (
                    "students",
                    models.ManyToManyField(related_name="groups_as_student", to="api.person"),
                ),
                (
                    "teachers",
                    models.ManyToManyField(related_name="groups_as_teacher", to="api.person"),
                ),
            ],
        ),
    ]
