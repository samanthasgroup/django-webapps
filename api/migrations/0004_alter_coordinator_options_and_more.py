# Generated by Django 5.1.7 on 2025-04-29 10:32

import django.db.models.deletion
import django.utils.timezone
import phonenumber_field.modelfields
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("api", "0003_fake_data"),
    ]

    operations = [
        migrations.AlterModelOptions(
            name="coordinator",
            options={"verbose_name": "Coordinator", "verbose_name_plural": "Coordinators"},
        ),
        migrations.AlterModelOptions(
            name="coordinatorlogevent",
            options={
                "verbose_name": "coordinator log event",
                "verbose_name_plural": "coordinator log events",
            },
        ),
        migrations.AlterModelOptions(
            name="dayandtimeslot",
            options={
                "ordering": ("day_of_week_index", "time_slot__from_utc_hour"),
                "verbose_name": "day and time slot",
                "verbose_name_plural": "days and time slots",
            },
        ),
        migrations.AlterModelOptions(
            name="enrollmenttest",
            options={"verbose_name": "enrollment test", "verbose_name_plural": "enrollment tests"},
        ),
        migrations.AlterModelOptions(
            name="enrollmenttestquestion",
            options={
                "verbose_name": "enrollment test question",
                "verbose_name_plural": "enrollment test questions",
            },
        ),
        migrations.AlterModelOptions(
            name="enrollmenttestresult",
            options={
                "verbose_name": "enrollment test result",
                "verbose_name_plural": "enrollment test results",
            },
        ),
        migrations.AlterModelOptions(
            name="group",
            options={"verbose_name": "group", "verbose_name_plural": "groups"},
        ),
        migrations.AlterModelOptions(
            name="grouplogevent",
            options={"verbose_name": "group log event", "verbose_name_plural": "group log events"},
        ),
        migrations.AlterModelOptions(
            name="language",
            options={"verbose_name": "language", "verbose_name_plural": "languages"},
        ),
        migrations.AlterModelOptions(
            name="languageandlevel",
            options={
                "verbose_name": "language with level",
                "verbose_name_plural": "languages with levels",
            },
        ),
        migrations.AlterModelOptions(
            name="languagelevel",
            options={"verbose_name": "language level", "verbose_name_plural": "language levels"},
        ),
        migrations.AlterModelOptions(
            name="nonteachinghelp",
            options={
                "verbose_name": "non-teaching help",
                "verbose_name_plural": "non-teaching helps",
            },
        ),
        migrations.AlterModelOptions(
            name="personalinfo",
            options={
                "ordering": ("last_name", "first_name"),
                "verbose_name_plural": "Personal info records",
            },
        ),
        migrations.AlterModelOptions(
            name="speakingclub",
            options={"verbose_name": "speaking club", "verbose_name_plural": "speaking clubs"},
        ),
        migrations.AlterModelOptions(
            name="student",
            options={"verbose_name": "student", "verbose_name_plural": "students"},
        ),
        migrations.AlterModelOptions(
            name="studentlogevent",
            options={
                "verbose_name": "student log event",
                "verbose_name_plural": "student log events",
            },
        ),
        migrations.AlterModelOptions(
            name="teacher",
            options={"verbose_name": "teacher", "verbose_name_plural": "teachers"},
        ),
        migrations.AlterModelOptions(
            name="teacherlogevent",
            options={
                "verbose_name": "teacher log event",
                "verbose_name_plural": "teacher log events",
            },
        ),
        migrations.AlterModelOptions(
            name="teacherunder18",
            options={
                "verbose_name": "teacher under 18",
                "verbose_name_plural": "Teachers under 18 years of age",
            },
        ),
        migrations.AlterModelOptions(
            name="teacherunder18logevent",
            options={
                "verbose_name": "teacher under 18 log event",
                "verbose_name_plural": "teacher under 18 log events",
            },
        ),
        migrations.AlterField(
            model_name="agerange",
            name="age_from",
            field=models.PositiveSmallIntegerField(verbose_name="Start of age range"),
        ),
        migrations.AlterField(
            model_name="agerange",
            name="type",
            field=models.CharField(
                choices=[
                    ("student", "for students to select their age"),
                    ("teacher", "for teacher to select desired ages of students"),
                    ("matching", "for matching algorithm"),
                ],
                help_text="Who or what is this range designed for",
                max_length=50,
                verbose_name="Type of age range",
            ),
        ),
        migrations.AlterField(
            model_name="coordinator",
            name="additional_skills_comment",
            field=models.CharField(
                blank=True, max_length=255, verbose_name="Comment on additional skills"
            ),
        ),
        migrations.AlterField(
            model_name="coordinator",
            name="comment",
            field=models.TextField(blank=True, verbose_name="comment"),
        ),
        migrations.AlterField(
            model_name="coordinator",
            name="is_admin",
            field=models.BooleanField(
                default=False,
                help_text="This field has nothing to do with accessing Django admin site. It marks coordinators that have special rights over ordinary coordinators.",
                verbose_name="Is admin (special rights)",
            ),
        ),
        migrations.AlterField(
            model_name="coordinator",
            name="is_validated",
            field=models.BooleanField(
                help_text="Has an initial validation interview been conducted with this teacher?",
                verbose_name="Validated",
            ),
        ),
        migrations.AlterField(
            model_name="coordinator",
            name="legacy_cid",
            field=models.IntegerField(
                help_text="Coordinator ID from the old database",
                null=True,
                verbose_name="Legacy Coordinator ID",
            ),
        ),
        migrations.AlterField(
            model_name="coordinator",
            name="mentor",
            field=models.ForeignKey(
                blank=True,
                help_text="Mentor of this coordinator. One coordinator can have many interns.",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="interns",
                to="api.coordinator",
                verbose_name="Mentor",
            ),
        ),
        migrations.AlterField(
            model_name="coordinator",
            name="personal_info",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE,
                primary_key=True,
                related_name="as_%(class)s",
                serialize=False,
                to="api.personalinfo",
                verbose_name="personal info",
            ),
        ),
        migrations.AlterField(
            model_name="coordinator",
            name="project_status",
            field=models.CharField(
                choices=[
                    ("pending", "Completed registration, but not in working status yet"),
                    (
                        "working_threshold_not_reached",
                        "Working, but not yet reached the required minimum amount of groups (5)",
                    ),
                    ("working_ok", "Working, required amount of groups reached"),
                    ("working_limit_reached", "Working, reached maximum number of groups (20)"),
                    ("on_leave", "On leave"),
                    ("left_prematurely", "Announced that they cannot participate in the project"),
                    ("finished_stays", "Finished coordinating but remains in the project"),
                    ("finished_left", "Finished coordinating and left the project"),
                    ("removed", "All access revoked, accounts closed"),
                    ("banned", "Banned from the project"),
                ],
                help_text="Status of this coordinator with regard to project as a whole",
                max_length=50,
                verbose_name="Status in project",
            ),
        ),
        migrations.AlterField(
            model_name="coordinator",
            name="role_comment",
            field=models.CharField(
                blank=True,
                help_text="Phrase describing the role of coordinator in project",
                max_length=255,
                verbose_name="Role comment",
            ),
        ),
        migrations.AlterField(
            model_name="coordinator",
            name="situational_status",
            field=models.CharField(
                blank=True,
                choices=[
                    ("onboarding", "In onboarding"),
                    (
                        "onboarding_stale",
                        "Has been in onboarding for too long without taking a group",
                    ),
                    ("no_response", "Not responding"),
                ],
                max_length=50,
                verbose_name="Situational status",
            ),
        ),
        migrations.AlterField(
            model_name="coordinator",
            name="status_since",
            field=models.DateTimeField(
                help_text="date and time of last change of project-level or situational status",
                verbose_name="status since",
            ),
        ),
        migrations.AlterField(
            model_name="coordinatorlogevent",
            name="comment",
            field=models.TextField(verbose_name="comment"),
        ),
        migrations.AlterField(
            model_name="coordinatorlogevent",
            name="coordinator",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="log",
                to="api.coordinator",
                verbose_name="coordinator",
            ),
        ),
        migrations.AlterField(
            model_name="coordinatorlogevent",
            name="date_time",
            field=models.DateTimeField(
                default=django.utils.timezone.now, verbose_name="date and time"
            ),
        ),
        migrations.AlterField(
            model_name="coordinatorlogevent",
            name="group",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="coordinator_log_events",
                to="api.group",
                verbose_name="group",
            ),
        ),
        migrations.AlterField(
            model_name="coordinatorlogevent",
            name="type",
            field=models.CharField(
                choices=[
                    ("applied", "Applied for the role"),
                    ("joined", "Joined the common group"),
                    ("onboarding_start", "Joined the onboarding group"),
                    (
                        "took_new_group",
                        "Took a new group (not transferred from another coordinator)",
                    ),
                    ("group_started_classes", "The group started classes"),
                    (
                        "requested_transfer",
                        "Requested that the group be transferred to a different coordinator",
                    ),
                    (
                        "transfer_canceled",
                        "Transfer canceled (declined or the coordinator changed their mind)",
                    ),
                    ("transferred", "Transfer of group to another coordinator completed"),
                    ("took_transfer", "Received group from another coordinator"),
                    ("gone_on_leave", "Gone on leave"),
                    ("returned_from_leave", "Returned from leave"),
                    ("left_prematurely", "Left the project prematurely"),
                    (
                        "finished_and_leaving",
                        "Finished working and announced that they are leaving the project",
                    ),
                    (
                        "finished_and_staying",
                        "Finished working and announced that they are staying in the project",
                    ),
                    ("expelled", "Expelled from the project"),
                    ("access_revoked", "Access to corporate resources revoked"),
                    ("group_aborted", "Group finished prematurely"),
                    ("group_finished", "Group studies are finished"),
                    (
                        "added_student_to_existing group",
                        "Added student to a group that was already studying",
                    ),
                ],
                max_length=50,
                verbose_name="event type",
            ),
        ),
        migrations.AlterField(
            model_name="dayandtimeslot",
            name="time_slot",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="api.timeslot",
                verbose_name="time slot",
            ),
        ),
        migrations.AlterField(
            model_name="enrollmenttest",
            name="age_ranges",
            field=models.ManyToManyField(
                blank=True,
                help_text="age ranges for which this test was designed. Leave blank for the test to be shown to all ages.",
                to="api.agerange",
                verbose_name="age ranges",
            ),
        ),
        migrations.AlterField(
            model_name="enrollmenttest",
            name="language",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="api.language",
                verbose_name="language",
            ),
        ),
        migrations.AlterField(
            model_name="enrollmenttestquestion",
            name="enrollment_test",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="questions",
                to="api.enrollmenttest",
                verbose_name="enrollment test",
            ),
        ),
        migrations.AlterField(
            model_name="enrollmenttestquestion",
            name="text",
            field=models.CharField(max_length=255, verbose_name="question text"),
        ),
        migrations.AlterField(
            model_name="enrollmenttestquestionoption",
            name="is_correct",
            field=models.BooleanField(verbose_name="is correct"),
        ),
        migrations.AlterField(
            model_name="enrollmenttestquestionoption",
            name="question",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="options",
                to="api.enrollmenttestquestion",
                verbose_name="question",
            ),
        ),
        migrations.AlterField(
            model_name="enrollmenttestquestionoption",
            name="text",
            field=models.CharField(max_length=50, verbose_name="option text"),
        ),
        migrations.AlterField(
            model_name="enrollmenttestresult",
            name="answers",
            field=models.ManyToManyField(
                to="api.enrollmenttestquestionoption", verbose_name="answers"
            ),
        ),
        migrations.AlterField(
            model_name="enrollmenttestresult",
            name="student",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="enrollment_test_results",
                to="api.student",
                verbose_name="student",
            ),
        ),
        migrations.AlterField(
            model_name="group",
            name="availability_slots_for_auto_matching",
            field=models.ManyToManyField(
                to="api.dayandtimeslot", verbose_name="availability slots for auto-matching"
            ),
        ),
        migrations.AlterField(
            model_name="group",
            name="comment",
            field=models.TextField(blank=True, verbose_name="comment"),
        ),
        migrations.AlterField(
            model_name="group",
            name="coordinators",
            field=models.ManyToManyField(
                related_name="%(class)ss", to="api.coordinator", verbose_name="coordinators"
            ),
        ),
        migrations.AlterField(
            model_name="group",
            name="end_date",
            field=models.DateField(blank=True, null=True, verbose_name="end date"),
        ),
        migrations.AlterField(
            model_name="group",
            name="friday",
            field=models.TimeField(blank=True, null=True, verbose_name="Friday"),
        ),
        migrations.AlterField(
            model_name="group",
            name="is_for_staff_only",
            field=models.BooleanField(default=False, verbose_name="is for staff only"),
        ),
        migrations.AlterField(
            model_name="group",
            name="language_and_level",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                to="api.languageandlevel",
                verbose_name="language and level",
            ),
        ),
        migrations.AlterField(
            model_name="group",
            name="legacy_gid",
            field=models.IntegerField(
                help_text="Group id from the old database",
                null=True,
                verbose_name="legacy group id",
            ),
        ),
        migrations.AlterField(
            model_name="group",
            name="lesson_duration_in_minutes",
            field=models.PositiveSmallIntegerField(verbose_name="lesson duration (minutes)"),
        ),
        migrations.AlterField(
            model_name="group",
            name="monday",
            field=models.TimeField(blank=True, null=True, verbose_name="Monday"),
        ),
        migrations.AlterField(
            model_name="group",
            name="project_status",
            field=models.CharField(
                choices=[
                    ("pending", "Pending"),
                    ("awaiting_start", "Group confirmed, awaiting start of classes"),
                    ("working", "Working, everything is OK"),
                    ("aborted", "Finished prematurely"),
                    ("finished", "Finished (completed the course)"),
                ],
                max_length=50,
                verbose_name="project status",
            ),
        ),
        migrations.AlterField(
            model_name="group",
            name="saturday",
            field=models.TimeField(blank=True, null=True, verbose_name="Saturday"),
        ),
        migrations.AlterField(
            model_name="group",
            name="situational_status",
            field=models.CharField(
                blank=True,
                choices=[
                    (
                        "attention",
                        "Some sort of problem: needs substitute teacher, change of coordinator etc.",
                    )
                ],
                max_length=50,
                verbose_name="situational status",
            ),
        ),
        migrations.AlterField(
            model_name="group",
            name="start_date",
            field=models.DateField(blank=True, null=True, verbose_name="start date"),
        ),
        migrations.AlterField(
            model_name="group",
            name="status_since",
            field=models.DateTimeField(
                help_text="date and time of last change of project-level or situational status",
                verbose_name="status since",
            ),
        ),
        migrations.AlterField(
            model_name="group",
            name="students",
            field=models.ManyToManyField(
                related_name="%(class)ss", to="api.student", verbose_name="students"
            ),
        ),
        migrations.AlterField(
            model_name="group",
            name="sunday",
            field=models.TimeField(blank=True, null=True, verbose_name="Sunday"),
        ),
        migrations.AlterField(
            model_name="group",
            name="teachers",
            field=models.ManyToManyField(
                related_name="%(class)ss", to="api.teacher", verbose_name="teachers"
            ),
        ),
        migrations.AlterField(
            model_name="group",
            name="telegram_chat_url",
            field=models.URLField(blank=True, null=True, verbose_name="telegram chat URL"),
        ),
        migrations.AlterField(
            model_name="group",
            name="thursday",
            field=models.TimeField(blank=True, null=True, verbose_name="Thursday"),
        ),
        migrations.AlterField(
            model_name="group",
            name="tuesday",
            field=models.TimeField(blank=True, null=True, verbose_name="Tuesday"),
        ),
        migrations.AlterField(
            model_name="group",
            name="wednesday",
            field=models.TimeField(blank=True, null=True, verbose_name="Wednesday"),
        ),
        migrations.AlterField(
            model_name="grouplogevent",
            name="comment",
            field=models.TextField(verbose_name="comment"),
        ),
        migrations.AlterField(
            model_name="grouplogevent",
            name="date_time",
            field=models.DateTimeField(
                default=django.utils.timezone.now, verbose_name="date and time"
            ),
        ),
        migrations.AlterField(
            model_name="grouplogevent",
            name="group",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="api.group", verbose_name="group"
            ),
        ),
        migrations.AlterField(
            model_name="grouplogevent",
            name="type",
            field=models.CharField(
                choices=[
                    ("formed", "Formed (automatically or by coordinator)"),
                    ("confirmed", "Confirmed"),
                    ("started", "Started classes"),
                    ("aborted", "Finished prematurely"),
                    ("finished", "Finished successfully"),
                    (
                        "coordinator_requested_transfer",
                        "Coordinator requested transfer of group to another coordinator",
                    ),
                    ("student_requested_transfer", "Student requested transfer to another group"),
                    (
                        "teacher_requested_substitution",
                        "Teacher requested to be substituted with another teacher",
                    ),
                ],
                max_length=50,
                verbose_name="event type",
            ),
        ),
        migrations.AlterField(
            model_name="language",
            name="name",
            field=models.CharField(max_length=50, verbose_name="name"),
        ),
        migrations.AlterField(
            model_name="languageandlevel",
            name="language",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="api.language",
                verbose_name="language",
            ),
        ),
        migrations.AlterField(
            model_name="languageandlevel",
            name="level",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="api.languagelevel",
                verbose_name="level",
            ),
        ),
        migrations.AlterField(
            model_name="languagelevel",
            name="id",
            field=models.CharField(
                max_length=2, primary_key=True, serialize=False, verbose_name="level id"
            ),
        ),
        migrations.AlterField(
            model_name="nonteachinghelp",
            name="id",
            field=models.CharField(
                choices=[
                    ("cv_write_edit", "CV and cover letter (write or edit)"),
                    ("cv_proofread", "CV and cover letter (proofread)"),
                    ("mock_interview", "Mock interview"),
                    ("job_search", "Job search"),
                    ("career_strategy", "Career strategy"),
                    ("linkedin", "LinkedIn profile"),
                    ("career_switch", "Career switch"),
                    ("portfolio", "Portfolio for creative industries"),
                    ("uni_abroad", "Entering a university abroad"),
                    ("translate_docs", "Translation of documents"),
                ],
                max_length=20,
                primary_key=True,
                serialize=False,
                verbose_name="help type id",
            ),
        ),
        migrations.AlterField(
            model_name="nonteachinghelp",
            name="name",
            field=models.CharField(max_length=255, unique=True, verbose_name="name"),
        ),
        migrations.AlterField(
            model_name="personalinfo",
            name="chatwoot_conversation_id",
            field=models.PositiveIntegerField(
                blank=True, null=True, verbose_name="Chatwoot conversation ID"
            ),
        ),
        migrations.AlterField(
            model_name="personalinfo",
            name="date_and_time_added",
            field=models.DateTimeField(auto_now_add=True, verbose_name="Date and time added"),
        ),
        migrations.AlterField(
            model_name="personalinfo",
            name="email",
            field=models.EmailField(max_length=254, verbose_name="Email"),
        ),
        migrations.AlterField(
            model_name="personalinfo",
            name="first_name",
            field=models.CharField(max_length=100, verbose_name="First name"),
        ),
        migrations.AlterField(
            model_name="personalinfo",
            name="information_source",
            field=models.TextField(
                help_text="How did they learn about Samantha Smith's Group?",
                verbose_name="Source of information about SSG",
            ),
        ),
        migrations.AlterField(
            model_name="personalinfo",
            name="last_name",
            field=models.CharField(max_length=100, verbose_name="Last name"),
        ),
        migrations.AlterField(
            model_name="personalinfo",
            name="phone",
            field=phonenumber_field.modelfields.PhoneNumberField(
                blank=True, max_length=128, null=True, region=None, verbose_name="Phone number"
            ),
        ),
        migrations.AlterField(
            model_name="personalinfo",
            name="registration_telegram_bot_chat_id",
            field=models.BigIntegerField(
                blank=True, null=True, verbose_name="Registration Telegram bot chat ID"
            ),
        ),
        migrations.AlterField(
            model_name="personalinfo",
            name="registration_telegram_bot_language",
            field=models.CharField(
                choices=[("en", "English"), ("ru", "Russian"), ("ua", "Ukrainian")],
                help_text="Language in which the person wishes to communicate with the bot (is chosen by the person at first contact)",
                max_length=2,
                verbose_name="Preferred bot language",
            ),
        ),
        migrations.AlterField(
            model_name="speakingclub",
            name="comment",
            field=models.TextField(blank=True, verbose_name="comment"),
        ),
        migrations.AlterField(
            model_name="speakingclub",
            name="coordinators",
            field=models.ManyToManyField(
                related_name="%(class)ss", to="api.coordinator", verbose_name="coordinators"
            ),
        ),
        migrations.AlterField(
            model_name="speakingclub",
            name="language",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                to="api.language",
                verbose_name="language",
            ),
        ),
        migrations.AlterField(
            model_name="speakingclub",
            name="students",
            field=models.ManyToManyField(
                related_name="%(class)ss", to="api.student", verbose_name="students"
            ),
        ),
        migrations.AlterField(
            model_name="speakingclub",
            name="teachers",
            field=models.ManyToManyField(
                related_name="%(class)ss", to="api.teacher", verbose_name="teachers"
            ),
        ),
        migrations.AlterField(
            model_name="speakingclub",
            name="teachers_under_18",
            field=models.ManyToManyField(
                to="api.teacherunder18", verbose_name="teachers under 18"
            ),
        ),
        migrations.AlterField(
            model_name="speakingclub",
            name="telegram_chat_url",
            field=models.URLField(blank=True, null=True, verbose_name="telegram chat URL"),
        ),
        migrations.AlterField(
            model_name="student",
            name="age_range",
            field=models.ForeignKey(
                help_text="We do not ask students for their exact age. They choose an age range when registering with us.",
                on_delete=django.db.models.deletion.PROTECT,
                to="api.agerange",
                verbose_name="age range",
            ),
        ),
        migrations.AlterField(
            model_name="student",
            name="availability_slots",
            field=models.ManyToManyField(
                to="api.dayandtimeslot", verbose_name="availability slots"
            ),
        ),
        migrations.AlterField(
            model_name="student",
            name="can_read_in_english",
            field=models.BooleanField(blank=True, null=True, verbose_name="can read in English"),
        ),
        migrations.AlterField(
            model_name="student",
            name="children",
            field=models.ManyToManyField(
                blank=True,
                help_text="children of this student that are also studying at SSG",
                related_name="parents",
                to="api.student",
                verbose_name="children",
            ),
        ),
        migrations.AlterField(
            model_name="student",
            name="comment",
            field=models.TextField(blank=True, verbose_name="comment"),
        ),
        migrations.AlterField(
            model_name="student",
            name="legacy_sid",
            field=models.IntegerField(
                help_text="Student id from the old database",
                null=True,
                verbose_name="legacy student id",
            ),
        ),
        migrations.AlterField(
            model_name="student",
            name="personal_info",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE,
                primary_key=True,
                related_name="as_%(class)s",
                serialize=False,
                to="api.personalinfo",
                verbose_name="personal info",
            ),
        ),
        migrations.AlterField(
            model_name="student",
            name="project_status",
            field=models.CharField(
                choices=[
                    (
                        "needs_interview_to_determine_level",
                        "Requires oral interview to determine language levelbefore getting 'no_group_yet' status",
                    ),
                    ("no_group_yet", "Not studying, waiting for a group"),
                    ("study", "Studying in a group"),
                    ("on_leave", "On leave"),
                    ("left_prematurely", "Left the project prematurely"),
                    ("finished", "Completed the course and left the project"),
                    ("banned", "Banned from the project"),
                ],
                help_text="status of this student with regard to project as a whole",
                max_length=50,
                verbose_name="status in project",
            ),
        ),
        migrations.AlterField(
            model_name="student",
            name="situational_status",
            field=models.CharField(
                blank=True,
                choices=[
                    ("group_offered", "Was offered a group, has not responded yet"),
                    ("awaiting_start", "Group confirmed, awaiting start of classes"),
                    (
                        "not_attending",
                        "Missed 3 classes in a row without letting the teacher know",
                    ),
                    ("needs_transfer", "Needs transfer to another group"),
                    ("no_response", "Not responding"),
                ],
                max_length=50,
                verbose_name="situational status",
            ),
        ),
        migrations.AlterField(
            model_name="student",
            name="smalltalk_test_result",
            field=models.JSONField(
                blank=True,
                help_text="JSON received from SmallTalk API",
                null=True,
                verbose_name="SmallTalk test result",
            ),
        ),
        migrations.AlterField(
            model_name="student",
            name="status_since",
            field=models.DateTimeField(
                help_text="date and time of last change of project-level or situational status",
                verbose_name="status since",
            ),
        ),
        migrations.AlterField(
            model_name="student",
            name="teaching_languages_and_levels",
            field=models.ManyToManyField(
                to="api.languageandlevel", verbose_name="teaching languages and levels"
            ),
        ),
        migrations.AlterField(
            model_name="studentlogevent",
            name="comment",
            field=models.TextField(verbose_name="comment"),
        ),
        migrations.AlterField(
            model_name="studentlogevent",
            name="date_time",
            field=models.DateTimeField(
                default=django.utils.timezone.now, verbose_name="date and time"
            ),
        ),
        migrations.AlterField(
            model_name="studentlogevent",
            name="from_group",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="student_log_events_from_this_group",
                to="api.group",
                verbose_name="from group",
            ),
        ),
        migrations.AlterField(
            model_name="studentlogevent",
            name="student",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="log",
                to="api.student",
                verbose_name="student",
            ),
        ),
        migrations.AlterField(
            model_name="studentlogevent",
            name="to_group",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="student_log_events_to_this_group",
                to="api.group",
                verbose_name="to group",
            ),
        ),
        migrations.AlterField(
            model_name="studentlogevent",
            name="type",
            field=models.CharField(
                choices=[
                    ("registered", "Completed registration"),
                    ("awaiting_offer", "Registration complete, waiting for a group"),
                    ("group_offered", "Was offered a group, has not responded yet"),
                    ("accepted_offer", "Was offered a group and accepted it"),
                    ("declined_offer", "Was offered a group but declined it"),
                    (
                        "tentative_group_discarded",
                        "Tentative group was discarded for reasons other than the person's own decision",
                    ),
                    ("group_confirmed", "Group confirmed, awaiting start of classes"),
                    ("start", "Started studying in a group"),
                    (
                        "missed_class_notified",
                        "Missed a class but let the teacher know in advance",
                    ),
                    (
                        "missed_class_silently",
                        "Missed a class without letting the teacher know in advance",
                    ),
                    ("requested_transfer", "Requested transfer"),
                    ("transferred", "Transferred"),
                    ("transfer_canceled", "Transfer canceled"),
                    ("left_prematurely", "Left the project prematurely"),
                    ("expelled", "Expelled from the project"),
                    ("finished_left", "Completed the course and left the project"),
                    ("group_aborted", "Group finished prematurely"),
                    ("group_finished", "Group finished successfully"),
                    ("gone_on_leave", "Gone on leave"),
                    ("returned_from_leave", "Returned from leave"),
                ],
                max_length=50,
                verbose_name="event type",
            ),
        ),
        migrations.AlterField(
            model_name="teacher",
            name="availability_slots",
            field=models.ManyToManyField(
                to="api.dayandtimeslot", verbose_name="availability slots"
            ),
        ),
        migrations.AlterField(
            model_name="teacher",
            name="comment",
            field=models.TextField(blank=True, verbose_name="comment"),
        ),
        migrations.AlterField(
            model_name="teacher",
            name="has_prior_teaching_experience",
            field=models.BooleanField(
                default=False,
                help_text="Has the applicant already worked as a teacher before applying at Samantha Smith's Group?",
                verbose_name="prior teaching experience",
            ),
        ),
        migrations.AlterField(
            model_name="teacher",
            name="legacy_tid",
            field=models.IntegerField(
                help_text="Teacher id from the old database",
                null=True,
                verbose_name="legacy teacher id",
            ),
        ),
        migrations.AlterField(
            model_name="teacher",
            name="personal_info",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE,
                primary_key=True,
                related_name="as_%(class)s",
                serialize=False,
                to="api.personalinfo",
                verbose_name="personal info",
            ),
        ),
        migrations.AlterField(
            model_name="teacher",
            name="simultaneous_groups",
            field=models.PositiveSmallIntegerField(
                default=1,
                help_text="Number of groups the teacher can teach simultaneously",
                verbose_name="simultaneous groups",
            ),
        ),
        migrations.AlterField(
            model_name="teacher",
            name="situational_status",
            field=models.CharField(
                blank=True,
                choices=[
                    ("group_offered", "Was offered a group, has not responded yet"),
                    ("awaiting_start", "Group confirmed, awaiting start of classes"),
                    (
                        "needs_substitution",
                        "Needs a break in teaching the group, substitute teacher needed",
                    ),
                    ("no_response", "Not responding"),
                ],
                max_length=50,
                verbose_name="situational status",
            ),
        ),
        migrations.AlterField(
            model_name="teacher",
            name="status_since",
            field=models.DateTimeField(
                help_text="date and time of last change of project-level or situational status",
                verbose_name="status since",
            ),
        ),
        migrations.AlterField(
            model_name="teacher",
            name="student_age_ranges",
            field=models.ManyToManyField(
                help_text="Age ranges of students that the teacher is willing to teach. The 'from's and 'to's of these ranges are wider than those the students choose for themselves.",
                to="api.agerange",
                verbose_name="student age ranges",
            ),
        ),
        migrations.AlterField(
            model_name="teacher",
            name="weekly_frequency_per_group",
            field=models.PositiveSmallIntegerField(
                help_text="Number of times per week the teacher can have classes with each group. This column will be ignored if the teacher currently doesn't want to teach any groups (in which case the column 'simultaneous groups' will have value 0). The value of frequency column does NOT have to be 0 in this case. Maybe the teacher will start (or return to) group studies and the frequency column will become relevant.",
                verbose_name="weekly frequency per group",
            ),
        ),
        migrations.AlterField(
            model_name="teacherlogevent",
            name="comment",
            field=models.TextField(verbose_name="comment"),
        ),
        migrations.AlterField(
            model_name="teacherlogevent",
            name="date_time",
            field=models.DateTimeField(
                default=django.utils.timezone.now, verbose_name="date and time"
            ),
        ),
        migrations.AlterField(
            model_name="teacherlogevent",
            name="from_group",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="teacher_log_events_from_this_group",
                to="api.group",
                verbose_name="from group",
            ),
        ),
        migrations.AlterField(
            model_name="teacherlogevent",
            name="teacher",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="log",
                to="api.teacher",
                verbose_name="teacher",
            ),
        ),
        migrations.AlterField(
            model_name="teacherlogevent",
            name="to_group",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="teacher_log_events_to_this_group",
                to="api.group",
                verbose_name="to group",
            ),
        ),
        migrations.AlterField(
            model_name="teacherlogevent",
            name="type",
            field=models.CharField(
                choices=[
                    ("registered", "Completed registration"),
                    (
                        "awaiting_offer",
                        "Registration and validation complete, started waiting for a group",
                    ),
                    ("group_offered", "Was offered a group, has not responded yet"),
                    ("accepted_offer", "Was offered a group and accepted it"),
                    ("validated", "Validated in a face-to-face interview"),
                    ("declined_offer", "Was offered a group but declined it"),
                    (
                        "tentative_group_discarded",
                        "Tentative group was discarded for reasons other than the person's own decision",
                    ),
                    ("group_confirmed", "Group confirmed, awaiting start of classes"),
                    ("started_teaching_group", "Started teaching a group"),
                    ("hosted_speaking_club", "Hosted a speaking club session"),
                    ("requested_transfer", "Requested transfer"),
                    ("transferred", "Transferred"),
                    ("transfer_canceled", "Transfer canceled"),
                    ("left_prematurely", "Left the project prematurely"),
                    (
                        "finished_and_leaving",
                        "Finished working and announced that they are leaving the project",
                    ),
                    (
                        "finished_and_staying",
                        "Finished working and announced that they are staying in the project",
                    ),
                    ("expelled", "Expelled from the project"),
                    ("access_revoked", "Access to corporate resources revoked"),
                    ("group_aborted", "Group finished prematurely"),
                    ("group_finished", "Group finished successfully"),
                    ("gone_on_leave", "Gone on leave"),
                    ("returned_from_leave", "Returned from leave"),
                ],
                max_length=50,
                verbose_name="event type",
            ),
        ),
        migrations.AlterField(
            model_name="teacherunder18",
            name="comment",
            field=models.TextField(blank=True, verbose_name="comment"),
        ),
        migrations.AlterField(
            model_name="teacherunder18",
            name="personal_info",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE,
                primary_key=True,
                related_name="as_%(class)s",
                serialize=False,
                to="api.personalinfo",
                verbose_name="personal info",
            ),
        ),
        migrations.AlterField(
            model_name="teacherunder18",
            name="situational_status",
            field=models.CharField(
                blank=True,
                choices=[
                    ("group_offered", "Was offered a group, has not responded yet"),
                    ("awaiting_start", "Group confirmed, awaiting start of classes"),
                    (
                        "needs_substitution",
                        "Needs a break in teaching the group, substitute teacher needed",
                    ),
                    ("no_response", "Not responding"),
                ],
                max_length=50,
                verbose_name="situational status",
            ),
        ),
        migrations.AlterField(
            model_name="teacherunder18",
            name="status_since",
            field=models.DateTimeField(
                help_text="date and time of last change of project-level or situational status",
                verbose_name="status since",
            ),
        ),
        migrations.AlterField(
            model_name="teacherunder18logevent",
            name="comment",
            field=models.TextField(verbose_name="comment"),
        ),
        migrations.AlterField(
            model_name="teacherunder18logevent",
            name="date_time",
            field=models.DateTimeField(
                default=django.utils.timezone.now, verbose_name="date and time"
            ),
        ),
        migrations.AlterField(
            model_name="teacherunder18logevent",
            name="teacher",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="log",
                to="api.teacherunder18",
                verbose_name="teacher under 18",
            ),
        ),
        migrations.AlterField(
            model_name="teacherunder18logevent",
            name="type",
            field=models.CharField(
                choices=[
                    ("registered", "Completed registration"),
                    ("validated", "Validated in a face-to-face interview"),
                    ("hosted_speaking_club", "Hosted a speaking club session"),
                    ("left", "Left the project"),
                    ("expelled", "Expelled from the project"),
                    ("access_revoked", "Access to corporate resources revoked"),
                    ("gone_on_leave", "Gone on leave"),
                    ("returned_from_leave", "Returned from leave"),
                ],
                max_length=50,
                verbose_name="event type",
            ),
        ),
        migrations.AlterField(
            model_name="timeslot",
            name="from_utc_hour",
            field=models.TimeField(verbose_name="from UTC hour"),
        ),
        migrations.AlterField(
            model_name="timeslot",
            name="to_utc_hour",
            field=models.TimeField(verbose_name="to UTC hour"),
        ),
    ]
