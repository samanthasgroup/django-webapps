# Generated by Django 4.1.7 on 2023-03-07 17:10

from django.db import migrations, models
import django.db.models.deletion
import phonenumber_field.modelfields


class Migration(migrations.Migration):
    dependencies = [
        ("api", "0002_agerange_communicationlanguagemode_and_more"),
    ]

    operations = [
        migrations.CreateModel(
            name="Language",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "name_internal",
                    models.CharField(
                        help_text="Internal name to use in code. This will allow to change user-facing names easily without breaking the code. Internal name must not change after adding it.",
                        max_length=50,
                        unique=True,
                        verbose_name="internal name",
                    ),
                ),
                (
                    "name_for_user",
                    models.CharField(max_length=100, verbose_name="Readable name for coordinator"),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="LanguageAndLevel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "level",
                    models.CharField(
                        choices=[
                            ("A0", "A0 (Starter)"),
                            ("A1", "A1 (Beginner)"),
                            ("A2", "A2 (Pre-Intermediate)"),
                            ("B1", "B1 (Intermediate)"),
                            ("B2", "B2 (Upper-Intermediate)"),
                            ("C1", "C1 (Advanced)"),
                        ],
                        max_length=2,
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Teaching languages with levels",
            },
        ),
        migrations.CreateModel(
            name="SpeakingClub",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "communication_language_mode",
                    models.CharField(
                        choices=[
                            ("ru", "Russian only"),
                            ("ua", "Ukrainian only"),
                            ("ru_ua", "Russian or Ukrainian"),
                            ("l2_only", "Only language being taught"),
                        ],
                        max_length=15,
                        verbose_name="Language(s) the students and teachers can speak in class",
                    ),
                ),
                ("telegram_chat_url", models.URLField(blank=True, null=True)),
                (
                    "is_for_children",
                    models.BooleanField(
                        default=False, verbose_name="Is this a speaking club for children?"
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="TeacherUnder18",
            fields=[
                ("comment", models.TextField(blank=True, null=True)),
                (
                    "personal_info",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        related_name="as_%(class)s",
                        serialize=False,
                        to="api.personalinfo",
                    ),
                ),
                (
                    "additional_skills_comment",
                    models.CharField(
                        blank=True,
                        help_text="other ways in which the applicant could help, besides teaching or helping otherteachers with materials or feedback (comment)",
                        max_length=255,
                        null=True,
                        verbose_name="comment on additional skills besides teaching",
                    ),
                ),
                ("can_help_with_speaking_club", models.BooleanField(default=False)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("waiting", "Waiting for a group"),
                            ("speak_club", "Teaching in a speaking club"),
                        ],
                        max_length=15,
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Teaching volunteers under 18 years of age",
            },
        ),
        migrations.RemoveField(
            model_name="coordinatorstatus",
            name="name",
        ),
        migrations.DeleteModel(
            name="GroupLogEventName",
        ),
        migrations.RemoveField(
            model_name="groupstatus",
            name="name",
        ),
        migrations.RemoveField(
            model_name="studentstatus",
            name="name",
        ),
        migrations.RemoveField(
            model_name="teacherstatus",
            name="name",
        ),
        migrations.RemoveField(
            model_name="teachinglanguageandlevel",
            name="language",
        ),
        migrations.RemoveField(
            model_name="teachinglanguageandlevel",
            name="level",
        ),
        migrations.AlterModelOptions(
            name="dayandtimeslot",
            options={"ordering": ("day_of_week_index", "time_slot__from_utc_hour")},
        ),
        migrations.AlterModelOptions(
            name="personalinfo",
            options={
                "ordering": ("last_name", "first_name"),
                "verbose_name_plural": "personal info records",
            },
        ),
        migrations.RenameField(
            model_name="coordinatorlogevent",
            old_name="coordinator_info",
            new_name="coordinator",
        ),
        migrations.RenameField(
            model_name="enrollmenttestresult",
            old_name="student_info",
            new_name="student",
        ),
        migrations.RenameField(
            model_name="studentlogevent",
            old_name="student_info",
            new_name="student",
        ),
        migrations.RenameField(
            model_name="teacherlogevent",
            old_name="teacher_info",
            new_name="teacher",
        ),
        migrations.RemoveField(
            model_name="agerange",
            name="name",
        ),
        migrations.RemoveField(
            model_name="coordinatorlogevent",
            name="name",
        ),
        migrations.RemoveField(
            model_name="dayandtimeslot",
            name="day_of_week",
        ),
        migrations.RemoveField(
            model_name="enrollmenttest",
            name="language",
        ),
        migrations.RemoveField(
            model_name="enrollmenttest",
            name="levels",
        ),
        migrations.RemoveField(
            model_name="personalinfo",
            name="availability_slots",
        ),
        migrations.RemoveField(
            model_name="personalinfo",
            name="comment",
        ),
        migrations.RemoveField(
            model_name="studentlogevent",
            name="name",
        ),
        migrations.RemoveField(
            model_name="teacher",
            name="categories",
        ),
        migrations.RemoveField(
            model_name="teacherlogevent",
            name="name",
        ),
        migrations.AddField(
            model_name="coordinator",
            name="comment",
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="coordinator",
            name="mentor",
            field=models.ForeignKey(
                blank=True,
                help_text="mentor of this coordinator. One coordinator can have many interns",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="interns",
                to="api.coordinator",
            ),
        ),
        migrations.AddField(
            model_name="coordinatorlogevent",
            name="from_group",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="%(class)s_from_self",
                to="api.group",
            ),
        ),
        migrations.AddField(
            model_name="coordinatorlogevent",
            name="to_group",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="%(class)s_to_self",
                to="api.group",
            ),
        ),
        migrations.AddField(
            model_name="coordinatorlogevent",
            name="type",
            field=models.CharField(
                choices=[
                    ("joined", "Joined the team"),
                    ("onboard", "Started onboarding"),
                    ("onboard_end", "Finished onboarding"),
                    ("took_group", "Took a group"),
                ],
                default=None,
                max_length=15,
            ),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name="dayandtimeslot",
            name="day_of_week_index",
            field=models.PositiveSmallIntegerField(
                choices=[
                    (0, "Monday"),
                    (1, "Tuesday"),
                    (2, "Wednesday"),
                    (3, "Thursday"),
                    (4, "Friday"),
                    (5, "Saturday"),
                    (6, "Sunday"),
                ],
                default=0,
                verbose_name="day of the week",
            ),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name="grouplogevent",
            name="type",
            field=models.CharField(
                choices=[
                    ("formed", "Formed"),
                    ("confirmed", "Confirmed"),
                    ("started", "Started classes"),
                    ("finished", "Finished classes"),
                ],
                default=None,
                max_length=15,
            ),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name="student",
            name="availability_slots",
            field=models.ManyToManyField(to="api.dayandtimeslot"),
        ),
        migrations.AddField(
            model_name="student",
            name="comment",
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="student",
            name="smalltalk_test_result",
            field=models.JSONField(
                blank=True, help_text="JSON received from SmallTalk API", null=True
            ),
        ),
        migrations.AddField(
            model_name="studentlogevent",
            name="from_group",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="%(class)s_from_self",
                to="api.group",
            ),
        ),
        migrations.AddField(
            model_name="studentlogevent",
            name="to_group",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="%(class)s_to_self",
                to="api.group",
            ),
        ),
        migrations.AddField(
            model_name="studentlogevent",
            name="type",
            field=models.CharField(
                choices=[
                    ("register", "Joined the team"),
                    ("start", "Started studying in a group"),
                    ("req_transf", "Requested transfer"),
                    ("transferred", "Transferred"),
                    ("missed_class", "Missed a class"),
                    ("finish_group", "Finished studying in a group"),
                    ("no_reply", "Not replying"),
                ],
                default=None,
                max_length=15,
            ),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name="teacher",
            name="additional_skills_comment",
            field=models.CharField(
                blank=True,
                help_text="other ways in which the applicant could help, besides teaching or helping otherteachers with materials or feedback (comment)",
                max_length=255,
                null=True,
                verbose_name="comment on additional skills besides teaching",
            ),
        ),
        migrations.AddField(
            model_name="teacher",
            name="availability_slots",
            field=models.ManyToManyField(to="api.dayandtimeslot"),
        ),
        migrations.AddField(
            model_name="teacher",
            name="can_check_syllabus",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="teacher",
            name="can_consult_other_teachers",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="teacher",
            name="can_give_feedback",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="teacher",
            name="can_help_with_children_group",
            field=models.BooleanField(
                default=False, verbose_name="can help with children's groups"
            ),
        ),
        migrations.AddField(
            model_name="teacher",
            name="can_help_with_cv",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="teacher",
            name="can_help_with_materials",
            field=models.BooleanField(
                default=False, verbose_name="can help with teaching materials"
            ),
        ),
        migrations.AddField(
            model_name="teacher",
            name="can_help_with_speaking_club",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="teacher",
            name="can_invite_to_class",
            field=models.BooleanField(
                default=False, verbose_name="can invite other teachers to their class"
            ),
        ),
        migrations.AddField(
            model_name="teacher",
            name="can_work_in_tandem",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="teacher",
            name="comment",
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="teacherlogevent",
            name="from_group",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="%(class)s_from_self",
                to="api.group",
            ),
        ),
        migrations.AddField(
            model_name="teacherlogevent",
            name="to_group",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="%(class)s_to_self",
                to="api.group",
            ),
        ),
        migrations.AddField(
            model_name="teacherlogevent",
            name="type",
            field=models.CharField(
                choices=[
                    ("register", "Joined the team"),
                    ("start", "Started studying in a group"),
                    ("finish_group", "Finished studying in a group"),
                    ("no_reply", "Not replying"),
                ],
                default=None,
                max_length=15,
            ),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name="agerange",
            name="age_from",
            field=models.PositiveSmallIntegerField(),
        ),
        migrations.AlterField(
            model_name="agerange",
            name="age_to",
            field=models.PositiveSmallIntegerField(),
        ),
        migrations.AlterField(
            model_name="coordinator",
            name="personal_info",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE,
                primary_key=True,
                related_name="as_%(class)s",
                serialize=False,
                to="api.personalinfo",
            ),
        ),
        migrations.AlterField(
            model_name="coordinator",
            name="status",
            field=models.CharField(
                choices=[("onboarding", "In onboarding"), ("working", "Working with a group")],
                max_length=15,
            ),
        ),
        migrations.AlterField(
            model_name="enrollmenttestquestionoption",
            name="text",
            field=models.CharField(max_length=50),
        ),
        migrations.AlterField(
            model_name="group",
            name="communication_language_mode",
            field=models.CharField(
                choices=[
                    ("ru", "Russian only"),
                    ("ua", "Ukrainian only"),
                    ("ru_ua", "Russian or Ukrainian"),
                    ("l2_only", "Only language being taught"),
                ],
                max_length=15,
                verbose_name="Language(s) the students and teachers can speak in class",
            ),
        ),
        migrations.AlterField(
            model_name="group",
            name="lesson_duration",
            field=models.PositiveSmallIntegerField(),
        ),
        migrations.AlterField(
            model_name="group",
            name="status",
            field=models.CharField(
                choices=[("pending", "Pending"), ("study", "Studying"), ("finish", "Finished")],
                max_length=15,
            ),
        ),
        migrations.AlterField(
            model_name="personalinfo",
            name="communication_language_mode",
            field=models.CharField(
                choices=[
                    ("ru", "Russian only"),
                    ("ua", "Ukrainian only"),
                    ("ru_ua", "Russian or Ukrainian"),
                    ("l2_only", "Only language being taught"),
                ],
                max_length=15,
                verbose_name="Language(s) the students and teachers can speak in class",
            ),
        ),
        migrations.AlterField(
            model_name="personalinfo",
            name="information_source",
            field=models.TextField(
                help_text="how did they learn about Samantha Smith's Group?",
                verbose_name="source of info about SSG",
            ),
        ),
        migrations.AlterField(
            model_name="personalinfo",
            name="phone",
            field=phonenumber_field.modelfields.PhoneNumberField(
                blank=True, max_length=128, null=True, region=None
            ),
        ),
        migrations.AlterField(
            model_name="student",
            name="personal_info",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE,
                primary_key=True,
                related_name="as_%(class)s",
                serialize=False,
                to="api.personalinfo",
            ),
        ),
        migrations.AlterField(
            model_name="student",
            name="status",
            field=models.CharField(
                choices=[
                    ("waiting", "Waiting for a group"),
                    ("study", "Studying in a group"),
                    ("transfer", "Needs transfer to another group"),
                ],
                help_text="status of this student with regard to group studies",
                max_length=15,
                verbose_name="group studies status",
            ),
        ),
        migrations.AlterField(
            model_name="teacher",
            name="has_prior_teaching_experience",
            field=models.BooleanField(
                default=False,
                help_text="has the applicant already worked as a teacher before applying at Samantha Smith's Group?",
            ),
        ),
        migrations.AlterField(
            model_name="teacher",
            name="personal_info",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE,
                primary_key=True,
                related_name="as_%(class)s",
                serialize=False,
                to="api.personalinfo",
            ),
        ),
        migrations.AlterField(
            model_name="teacher",
            name="simultaneous_groups",
            field=models.PositiveSmallIntegerField(
                default=1, help_text="number of groups the teacher can teach simultaneously"
            ),
        ),
        migrations.AlterField(
            model_name="teacher",
            name="status",
            field=models.CharField(
                choices=[
                    ("waiting", "Waiting for a group"),
                    ("teaching", "Teaching a group"),
                    ("transfer", "Needs transfer to another group"),
                ],
                help_text="status of this teacher with regard to group studies",
                max_length=15,
                verbose_name="group studies status",
            ),
        ),
        migrations.AlterField(
            model_name="teacher",
            name="student_age_ranges",
            field=models.ManyToManyField(
                help_text="age ranges of students that the teacher is willing to teach. The 'from's and 'to's of these ranges are wider than those the students choose for themselves.",
                to="api.agerange",
            ),
        ),
        migrations.AlterField(
            model_name="teacher",
            name="weekly_frequency_per_group",
            field=models.PositiveSmallIntegerField(
                help_text="number of times per week the teacher can have classes with each group"
            ),
        ),
        migrations.AddConstraint(
            model_name="agerange",
            constraint=models.UniqueConstraint(fields=("age_from", "age_to"), name="age_from_to"),
        ),
        migrations.AddConstraint(
            model_name="dayandtimeslot",
            constraint=models.UniqueConstraint(
                fields=("day_of_week_index", "time_slot"), name="day_and_slot"
            ),
        ),
        migrations.AddConstraint(
            model_name="enrollmenttestquestionoption",
            constraint=models.UniqueConstraint(
                fields=("question_id", "text"), name="option_unique_per_question"
            ),
        ),
        migrations.AddConstraint(
            model_name="enrollmenttestquestionoption",
            constraint=models.UniqueConstraint(
                fields=("question_id", "is_correct"), name="only_one_correct_option_per_question"
            ),
        ),
        migrations.AddConstraint(
            model_name="group",
            constraint=models.UniqueConstraint(
                fields=("telegram_chat_url",), name="telegram_chat_url"
            ),
        ),
        migrations.AddConstraint(
            model_name="personalinfo",
            constraint=models.UniqueConstraint(
                fields=("first_name", "last_name", "email"), name="full_name_and_email"
            ),
        ),
        migrations.AddConstraint(
            model_name="timeslot",
            constraint=models.UniqueConstraint(
                fields=("from_utc_hour", "to_utc_hour"), name="from_to_hour"
            ),
        ),
        migrations.DeleteModel(
            name="CommunicationLanguageMode",
        ),
        migrations.DeleteModel(
            name="CoordinatorLogEventName",
        ),
        migrations.DeleteModel(
            name="CoordinatorStatus",
        ),
        migrations.DeleteModel(
            name="CoordinatorStatusName",
        ),
        migrations.DeleteModel(
            name="DayOfWeek",
        ),
        migrations.DeleteModel(
            name="GroupStatus",
        ),
        migrations.DeleteModel(
            name="GroupStatusName",
        ),
        migrations.DeleteModel(
            name="LanguageLevel",
        ),
        migrations.DeleteModel(
            name="StudentLogEventName",
        ),
        migrations.DeleteModel(
            name="StudentStatus",
        ),
        migrations.DeleteModel(
            name="StudentStatusName",
        ),
        migrations.DeleteModel(
            name="TeacherCategory",
        ),
        migrations.DeleteModel(
            name="TeacherLogEventName",
        ),
        migrations.DeleteModel(
            name="TeacherStatus",
        ),
        migrations.DeleteModel(
            name="TeacherStatusName",
        ),
        migrations.DeleteModel(
            name="TeachingLanguage",
        ),
        migrations.AddField(
            model_name="speakingclub",
            name="coordinators",
            field=models.ManyToManyField(to="api.coordinator"),
        ),
        migrations.AddField(
            model_name="speakingclub",
            name="language",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT, to="api.language"
            ),
        ),
        migrations.AddField(
            model_name="speakingclub",
            name="students",
            field=models.ManyToManyField(to="api.student"),
        ),
        migrations.AddField(
            model_name="speakingclub",
            name="teachers",
            field=models.ManyToManyField(to="api.teacher"),
        ),
        migrations.AddField(
            model_name="speakingclub",
            name="teachers_under_18",
            field=models.ManyToManyField(to="api.teacherunder18"),
        ),
        migrations.AddField(
            model_name="languageandlevel",
            name="language",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="api.language"
            ),
        ),
        migrations.AddConstraint(
            model_name="language",
            constraint=models.UniqueConstraint(
                fields=("name_internal",), name="flanguage_name_internal"
            ),
        ),
        migrations.AddField(
            model_name="enrollmenttest",
            name="languages_and_levels",
            field=models.ManyToManyField(to="api.languageandlevel"),
        ),
        migrations.AlterField(
            model_name="group",
            name="language_and_level",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT, to="api.languageandlevel"
            ),
        ),
        migrations.AlterField(
            model_name="student",
            name="teaching_languages_and_levels",
            field=models.ManyToManyField(to="api.languageandlevel"),
        ),
        migrations.AlterField(
            model_name="teacher",
            name="teaching_languages_and_levels",
            field=models.ManyToManyField(to="api.languageandlevel"),
        ),
        migrations.DeleteModel(
            name="TeachingLanguageAndLevel",
        ),
    ]
