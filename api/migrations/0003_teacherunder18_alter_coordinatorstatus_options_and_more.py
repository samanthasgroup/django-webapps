# Generated by Django 4.1.7 on 2023-03-03 16:44

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    dependencies = [
        ("api", "0002_agerange_communicationlanguagemode_and_more"),
    ]

    operations = [
        migrations.CreateModel(
            name="TeacherUnder18",
            fields=[
                ("comment", models.TextField(blank=True, null=True)),
                (
                    "personal_info",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        related_name="as_%(class)s",
                        serialize=False,
                        to="api.personalinfo",
                    ),
                ),
                ("status_since", models.DateTimeField(auto_now=True)),
                (
                    "additional_skills_comment",
                    models.CharField(
                        blank=True,
                        help_text="other ways in which the applicant could help, besides teaching or helping otherteachers with materials or feedback (comment)",
                        max_length=255,
                        null=True,
                        verbose_name="Comment on additional skills besides teaching",
                    ),
                ),
                ("can_help_with_speaking_club", models.BooleanField(default=False)),
            ],
            options={
                "verbose_name_plural": "Teaching volunteers under 18 years of age",
            },
        ),
        migrations.AlterModelOptions(
            name="coordinatorstatus",
            options={"verbose_name_plural": "possible coordinator statuses"},
        ),
        migrations.AlterModelOptions(
            name="dayofweek",
            options={"verbose_name_plural": "days of the week"},
        ),
        migrations.AlterModelOptions(
            name="groupstatus",
            options={"verbose_name_plural": "possible group statuses"},
        ),
        migrations.AlterModelOptions(
            name="personalinfo",
            options={
                "ordering": ("last_name", "first_name"),
                "verbose_name_plural": "personal info records",
            },
        ),
        migrations.AlterModelOptions(
            name="studentstatus",
            options={"verbose_name_plural": "possible student statuses (group studies)"},
        ),
        migrations.AlterModelOptions(
            name="teacherstatus",
            options={"verbose_name_plural": "possible teacher statuses (group studies)"},
        ),
        migrations.AlterModelOptions(
            name="teachinglanguageandlevel",
            options={"verbose_name_plural": "Teaching languages with levels"},
        ),
        migrations.RenameField(
            model_name="coordinatorlogevent",
            old_name="coordinator_info",
            new_name="coordinator",
        ),
        migrations.RenameField(
            model_name="enrollmenttestresult",
            old_name="student_info",
            new_name="student",
        ),
        migrations.RenameField(
            model_name="studentlogevent",
            old_name="student_info",
            new_name="student",
        ),
        migrations.RenameField(
            model_name="teacherlogevent",
            old_name="teacher_info",
            new_name="teacher",
        ),
        migrations.RemoveField(
            model_name="agerange",
            name="name",
        ),
        migrations.RemoveField(
            model_name="coordinatorstatus",
            name="in_place_since",
        ),
        migrations.RemoveField(
            model_name="groupstatus",
            name="in_place_since",
        ),
        migrations.RemoveField(
            model_name="personalinfo",
            name="availability_slots",
        ),
        migrations.RemoveField(
            model_name="personalinfo",
            name="comment",
        ),
        migrations.RemoveField(
            model_name="student",
            name="status",
        ),
        migrations.RemoveField(
            model_name="studentstatus",
            name="in_place_since",
        ),
        migrations.RemoveField(
            model_name="teacher",
            name="categories",
        ),
        migrations.RemoveField(
            model_name="teacher",
            name="status",
        ),
        migrations.RemoveField(
            model_name="teacherstatus",
            name="in_place_since",
        ),
        migrations.AddField(
            model_name="coordinator",
            name="comment",
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="coordinator",
            name="mentor",
            field=models.ForeignKey(
                blank=True,
                help_text="curator of this coordinator. One coordinator can have many interns",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="interns",
                to="api.coordinator",
            ),
        ),
        migrations.AddField(
            model_name="coordinator",
            name="status_since",
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.AddField(
            model_name="coordinatorlogevent",
            name="from_group",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="%(class)s_from_self",
                to="api.group",
            ),
        ),
        migrations.AddField(
            model_name="coordinatorlogevent",
            name="to_group",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="%(class)s_to_self",
                to="api.group",
            ),
        ),
        migrations.AddField(
            model_name="group",
            name="status_since",
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.AddField(
            model_name="grouplogevent",
            name="name",
            field=models.ForeignKey(
                default="", on_delete=django.db.models.deletion.CASCADE, to="api.grouplogeventname"
            ),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name="student",
            name="availability_slots",
            field=models.ManyToManyField(to="api.dayandtimeslot"),
        ),
        migrations.AddField(
            model_name="student",
            name="comment",
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="student",
            name="group_status",
            field=models.ForeignKey(
                default=None,
                help_text="Status of this student with regard to group studies",
                on_delete=django.db.models.deletion.PROTECT,
                to="api.studentstatus",
                verbose_name="Group studies status",
            ),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name="student",
            name="smalltalk_test_result",
            field=models.JSONField(
                blank=True, help_text="JSON received from SmallTalk API", null=True
            ),
        ),
        migrations.AddField(
            model_name="student",
            name="status_since",
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.AddField(
            model_name="studentlogevent",
            name="from_group",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="%(class)s_from_self",
                to="api.group",
            ),
        ),
        migrations.AddField(
            model_name="studentlogevent",
            name="to_group",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="%(class)s_to_self",
                to="api.group",
            ),
        ),
        migrations.AddField(
            model_name="teacher",
            name="additional_skills_comment",
            field=models.CharField(
                blank=True,
                help_text="other ways in which the applicant could help, besides teaching or helping otherteachers with materials or feedback (comment)",
                max_length=255,
                null=True,
                verbose_name="Comment on additional skills besides teaching",
            ),
        ),
        migrations.AddField(
            model_name="teacher",
            name="availability_slots",
            field=models.ManyToManyField(to="api.dayandtimeslot"),
        ),
        migrations.AddField(
            model_name="teacher",
            name="can_check_syllabus",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="teacher",
            name="can_consult_other_teachers",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="teacher",
            name="can_give_feedback",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="teacher",
            name="can_help_with_children_group",
            field=models.BooleanField(
                default=False, verbose_name="can help with children's groups"
            ),
        ),
        migrations.AddField(
            model_name="teacher",
            name="can_help_with_cv",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="teacher",
            name="can_help_with_materials",
            field=models.BooleanField(
                default=False, verbose_name="can help with teaching materials"
            ),
        ),
        migrations.AddField(
            model_name="teacher",
            name="can_help_with_speaking_club",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="teacher",
            name="can_invite_to_class",
            field=models.BooleanField(
                default=False, verbose_name="can invite other teachers to their class"
            ),
        ),
        migrations.AddField(
            model_name="teacher",
            name="can_work_in_tandem",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="teacher",
            name="comment",
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="teacher",
            name="group_status",
            field=models.ForeignKey(
                default=None,
                help_text="Status of this teacher with regard to group studies.",
                on_delete=django.db.models.deletion.PROTECT,
                to="api.teacherstatus",
            ),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name="teacher",
            name="status_since",
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.AddField(
            model_name="teacherlogevent",
            name="from_group",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="%(class)s_from_self",
                to="api.group",
            ),
        ),
        migrations.AddField(
            model_name="teacherlogevent",
            name="to_group",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="%(class)s_to_self",
                to="api.group",
            ),
        ),
        migrations.AlterField(
            model_name="agerange",
            name="age_from",
            field=models.PositiveSmallIntegerField(),
        ),
        migrations.AlterField(
            model_name="agerange",
            name="age_to",
            field=models.PositiveSmallIntegerField(),
        ),
        migrations.AlterField(
            model_name="coordinator",
            name="personal_info",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE,
                primary_key=True,
                related_name="as_%(class)s",
                serialize=False,
                to="api.personalinfo",
            ),
        ),
        migrations.AlterField(
            model_name="coordinatorstatus",
            name="name",
            field=models.CharField(max_length=100),
        ),
        migrations.AlterField(
            model_name="group",
            name="lesson_duration",
            field=models.PositiveSmallIntegerField(),
        ),
        migrations.AlterField(
            model_name="groupstatus",
            name="name",
            field=models.CharField(max_length=100),
        ),
        migrations.AlterField(
            model_name="languagelevel",
            name="rank",
            field=models.PositiveSmallIntegerField(unique=True),
        ),
        migrations.AlterField(
            model_name="student",
            name="personal_info",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE,
                primary_key=True,
                related_name="as_%(class)s",
                serialize=False,
                to="api.personalinfo",
            ),
        ),
        migrations.AlterField(
            model_name="studentstatus",
            name="name",
            field=models.CharField(max_length=100),
        ),
        migrations.AlterField(
            model_name="teacher",
            name="has_prior_teaching_experience",
            field=models.BooleanField(
                default=False,
                help_text="Has the applicant already worked as a teacher before applying at Samantha Smith's Group?",
            ),
        ),
        migrations.AlterField(
            model_name="teacher",
            name="personal_info",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE,
                primary_key=True,
                related_name="as_%(class)s",
                serialize=False,
                to="api.personalinfo",
            ),
        ),
        migrations.AlterField(
            model_name="teacher",
            name="simultaneous_groups",
            field=models.PositiveSmallIntegerField(
                default=1, help_text="Number of groups the teacher can teach simultaneously"
            ),
        ),
        migrations.AlterField(
            model_name="teacher",
            name="weekly_frequency_per_group",
            field=models.PositiveSmallIntegerField(
                help_text="Number of times per week the teacher can have classes with each group"
            ),
        ),
        migrations.AlterField(
            model_name="teacherstatus",
            name="name",
            field=models.CharField(max_length=100),
        ),
        migrations.AddConstraint(
            model_name="agerange",
            constraint=models.UniqueConstraint(fields=("age_from", "age_to"), name="age_from_to"),
        ),
        migrations.AddConstraint(
            model_name="communicationlanguagemode",
            constraint=models.UniqueConstraint(
                fields=("name_internal",), name="fcommunicationlanguagemode_name_internal"
            ),
        ),
        migrations.AddConstraint(
            model_name="coordinatorlogeventname",
            constraint=models.UniqueConstraint(
                fields=("name",), name="fcoordinatorlogeventname_name"
            ),
        ),
        migrations.AddConstraint(
            model_name="dayandtimeslot",
            constraint=models.UniqueConstraint(
                fields=("day_of_week", "time_slot"), name="day_and_slot"
            ),
        ),
        migrations.AddConstraint(
            model_name="group",
            constraint=models.UniqueConstraint(
                fields=("telegram_chat_url",), name="telegram_chat_url"
            ),
        ),
        migrations.AddConstraint(
            model_name="grouplogeventname",
            constraint=models.UniqueConstraint(fields=("name",), name="fgrouplogeventname_name"),
        ),
        migrations.AddConstraint(
            model_name="personalinfo",
            constraint=models.UniqueConstraint(
                fields=("first_name", "last_name", "email"), name="full_name_and_email"
            ),
        ),
        migrations.AddConstraint(
            model_name="studentlogeventname",
            constraint=models.UniqueConstraint(fields=("name",), name="fstudentlogeventname_name"),
        ),
        migrations.AddConstraint(
            model_name="teacherlogeventname",
            constraint=models.UniqueConstraint(fields=("name",), name="fteacherlogeventname_name"),
        ),
        migrations.AddConstraint(
            model_name="teachinglanguage",
            constraint=models.UniqueConstraint(
                fields=("name_internal",), name="fteachinglanguage_name_internal"
            ),
        ),
        migrations.AddConstraint(
            model_name="timeslot",
            constraint=models.UniqueConstraint(
                fields=("from_utc_hour", "to_utc_hour"), name="from_to_hour"
            ),
        ),
        migrations.DeleteModel(
            name="CoordinatorStatusName",
        ),
        migrations.DeleteModel(
            name="GroupStatusName",
        ),
        migrations.DeleteModel(
            name="StudentStatusName",
        ),
        migrations.DeleteModel(
            name="TeacherCategory",
        ),
        migrations.DeleteModel(
            name="TeacherStatusName",
        ),
    ]
