# Generated by Django 4.1.7 on 2023-03-04 16:30

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    dependencies = [
        ("api", "0007_rename_coordinatorlogeventname_coordinatorlogeventtype_and_more"),
    ]

    operations = [
        migrations.CreateModel(
            name="TeacherLogEventRule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "name_internal",
                    models.CharField(
                        help_text="Internal name to use in code. This will allow to change user-facing names easily without breaking the code. Internal name must not change after adding it.",
                        max_length=50,
                        unique=True,
                        verbose_name="internal name",
                    ),
                ),
                (
                    "name_for_user",
                    models.CharField(max_length=100, verbose_name="Readable name for coordinator"),
                ),
                (
                    "statuses_to_set",
                    models.JSONField(
                        help_text="JSON describing what object must get what status when the event is triggered"
                    ),
                ),
                (
                    "log_event_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="api.teacherlogeventtype"
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Rules for status changes after teacher events",
            },
        ),
        migrations.CreateModel(
            name="StudentLogEventRule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "name_internal",
                    models.CharField(
                        help_text="Internal name to use in code. This will allow to change user-facing names easily without breaking the code. Internal name must not change after adding it.",
                        max_length=50,
                        unique=True,
                        verbose_name="internal name",
                    ),
                ),
                (
                    "name_for_user",
                    models.CharField(max_length=100, verbose_name="Readable name for coordinator"),
                ),
                (
                    "statuses_to_set",
                    models.JSONField(
                        help_text="JSON describing what object must get what status when the event is triggered"
                    ),
                ),
                (
                    "log_event_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="api.studentlogeventtype"
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Rules for status changes after student events",
            },
        ),
        migrations.CreateModel(
            name="GroupLogEventRule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "name_internal",
                    models.CharField(
                        help_text="Internal name to use in code. This will allow to change user-facing names easily without breaking the code. Internal name must not change after adding it.",
                        max_length=50,
                        unique=True,
                        verbose_name="internal name",
                    ),
                ),
                (
                    "name_for_user",
                    models.CharField(max_length=100, verbose_name="Readable name for coordinator"),
                ),
                (
                    "statuses_to_set",
                    models.JSONField(
                        help_text="JSON describing what object must get what status when the event is triggered"
                    ),
                ),
                (
                    "log_event_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="api.grouplogeventtype"
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Rules for status changes after group events",
            },
        ),
        migrations.CreateModel(
            name="CoordinatorLogEventRule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "name_internal",
                    models.CharField(
                        help_text="Internal name to use in code. This will allow to change user-facing names easily without breaking the code. Internal name must not change after adding it.",
                        max_length=50,
                        unique=True,
                        verbose_name="internal name",
                    ),
                ),
                (
                    "name_for_user",
                    models.CharField(max_length=100, verbose_name="Readable name for coordinator"),
                ),
                (
                    "statuses_to_set",
                    models.JSONField(
                        help_text="JSON describing what object must get what status when the event is triggered"
                    ),
                ),
                (
                    "log_event_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.coordinatorlogeventtype",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Rules for status changes after coordinator events",
            },
        ),
    ]
